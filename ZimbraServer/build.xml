<project name="ZimbraServer" default="jar">

	<property environment="env"/>

	<!-- This machine's hostname.  Use ZIMBRA_HOSTNAME environment variable
	     if set.  If not, use "hostname" command output. -->
	<exec executable="hostname" outputproperty="exec.hostname"/>
	<condition property="zimbra.server.hostname" value="${env.ZIMBRA_HOSTNAME}">
		<isset property="env.ZIMBRA_HOSTNAME"/>
	</condition>
	<condition property="zimbra.server.hostname" value="${exec.hostname}">
		<not><isset property="zimbra.server.hostname"/></not>
	</condition>

	<!-- SMTP server for outgoing email.  Use ZIMBRA_SMTP_HOST environment
	     variable if set.  Otherwise default to "localhost". -->
	<condition property="zimbra.smtp.host" value="${env.ZIMBRA_SMTP_HOST}">
		<isset property="env.ZIMBRA_SMTP_HOST"/>
	</condition>
	<condition property="zimbra.smtp.host" value="localhost">
		<not><isset property="zimbra.smtp.host"/></not>
	</condition>

	<!-- Default email view, group by conversation or by message -->
	<condition property="zimbra.prefGroupMailBy" value="${env.ZIMBRA_GROUP_MAIL_BY}">
		<isset property="env.ZIMBRA_GROUP_MAIL_BY"/>
	</condition>
	<condition property="zimbra.prefGroupMailBy" value="conversation">
		<not><isset property="zimbra.prefGroupMailBy"/></not>
	</condition>

	<property name="build.dir" location="build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.zmprov" location="${build.dir}/data/zmprov.txt" />	
	<property name="dist.dir" location="build/dist" />
	<property name="generated.java.dir" location="${build.dir}/generated/src/java" />
	<property name="warfile" location="${build.dir}/service.war" />
	<property name="jarfile" location="${build.dir}/zimbrastore.jar" />
	<property name="common.dir" location="../ZimbraCommon" />
	<property name="common.classes.dir" location="${common.dir}/build/classes" />
	<property name="common.jarfile" location="${common.dir}/build/zimbracommon.jar" />
	<property name="common.jars.dir" location="${common.dir}/jars" />

	<property name="im.dir" location="../ZimbraIM" />
	<property name="im.classes.dir" location="${im.dir}/build/classes" />
	<property name="im.jarfile" location="${im.dir}/build/zimbraim.jar" />
	<property name="im.jars.dir" location="${im.dir}/jars" />
	
	<property name="jars.dir" location="jars" />
	<property name="lib.dir" location="lib" />
	<property name="src.dir" location="src" />
	<property name="src.java.dir" location="${src.dir}/java" />
	<property name="config.dir" location="conf" />
	<property name="zimlet.dir" location="../Zimlet/build/dist" />
	<property file="${zimlet.dir}/build.properties" />

	<property name="deploy.war" value="${warfile}" />
	<property name="deploy.host" value="localhost" />
	<property name="deploy.port" value="7070" />

	<condition property="deploy.dir" value="${env.DEPLOY_DIR}">
	    <isset property="env.DEPLOY_DIR" />
	</condition>	

	<condition property="deploy.dir" value="/opt/zimbra/tomcat/webapps">
	  <not><isset property="env.DEPLOY_DIR"/></not>
	</condition>	
	
	<property name="deploy.path" value="/service" />
		
	<property name="lmtp.host" value="localhost" />
	<property name="lmtp.port" value="7025" />
	<property name="lmtpinject.numthreads" value="2" />

	<property name="zimbra.home.dir" location="/opt/zimbra" />
	<property name="tomcat.home.dir" location="${zimbra.home.dir}/tomcat" />

	<property name="ical4j.jar" value="ical4j-0.9.16-patched.jar" />

	<property name="wiki.user.default" value="wiki" /><!-- global wiki account -->

	<condition property="is-windows"><os family="windows"/></condition>
	<condition property="is-unix"><not><os family="windows"/></not></condition>

	<condition property="native.os" value="MacOSX"><os name="Mac OS X"/></condition>
	<condition property="native.os" value="Linux"><os name="Linux"/></condition>
	<condition property="native.so" value="jnilib"><os name="Mac OS X"/></condition>
	<condition property="native.so" value="so"><not><os name="Mac OS X"/></not></condition>

	<condition property="production.suffix" value=".production"><isset property="is-production"/></condition>
	<condition property="production.suffix" value=""><not><isset property="is-production"/></not></condition>

	<condition property="slapd.conf.src" value="${config.dir}/ldap/slapd.win.conf"><isset property="is-windows" /></condition>
	<condition property="slapd.conf.src" value="${config.dir}/ldap/slapd.conf${production.suffix}"><isset property="is-unix"/></condition>
	<condition property="slapd.conf.dir" value="openldap"><isset property="is-windows"/></condition>
	<condition property="slapd.conf.dir" value="conf"><isset property="is-unix"/></condition>
	<condition property="slapd.etc.dir" value="openldap/etc"><isset property="is-windows"/></condition>
	<condition property="slapd.etc.dir" value="openldap/etc/openldap"><isset property="is-unix"/></condition>

	<condition property="ldapmodify" value="${zimbra.home.dir}/openldap/ldapmodify"><isset property="is-windows"/></condition>
	<condition property="ldapmodify" value="${zimbra.home.dir}/openldap/bin/ldapmodify"><isset property="is-unix"/></condition>

	<condition property="ldapdelete" value="${zimbra.home.dir}/openldap/ldapdelete"><isset property="is-windows" /></condition>
	<condition property="ldapdelete" value="${zimbra.home.dir}/openldap/bin/ldapdelete"><isset property="is-unix" /></condition>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${common.jars.dir}/ant-contrib-1.0b1.jar"/>
		</classpath>
	</taskdef>

	<path id="class.path">
		<pathelement location="${common.classes.dir}" />
		<pathelement location="${im.classes.dir}" />
		<pathelement location="${build.classes.dir}" />
		<fileset dir="${jars.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${common.jars.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${im.jars.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="class.path" />
	
	<path id="all.java.path">
		<pathelement location="${src.java.dir}" />
		<pathelement location="${generated.java.dir}" />
	</path>

	<fileset dir="${src.java.dir}" id="src.java.files">
		<include name="**/*.java" />
	</fileset>

	<fileset dir="${generated.java.dir}" id="generated.java.files">
		<include name="**/*.java" />
	</fileset>

	<target name="make-dirs">
		<!-- take advantage of the fact that mkdir uses File.mkdirs() and creates inbetween dirs -->
		<echo>Creating dirs under ${base.dir}</echo>
		<mkdir dir="${base.dir}/${slapd.conf.dir}"/>
		<mkdir dir="${base.dir}/${slapd.etc.dir}/schema"/>
		<mkdir dir="${base.dir}/bin"/>
		<mkdir dir="${base.dir}/conf/msgs"/>
		<mkdir dir="${base.dir}/db"/>
		<mkdir dir="${base.dir}/lib/ext"/>
		<mkdir dir="${base.dir}/lib/jars"/>
		<mkdir dir="${base.dir}/libexec"/>
		<mkdir dir="${base.dir}/tomcat/common/endorsed"/>
		<mkdir dir="${base.dir}/tomcat/common/lib"/>
		<mkdir dir="${base.dir}/tomcat/conf"/>
		<mkdir dir="${base.dir}/tomcat/webapps"/>
		<mkdir dir="${base.dir}/wiki"/>
	</target>

	<target name="build-init">
		<mkdir dir="${build.classes.dir}"/>
		<mkdir dir="${generated.java.dir}"/>
		<mkdir dir="${build.dir}/wiki"/>
		<mkdir dir="${build.dir}/data"/>
		<antcall target="make-dirs"><param name="base.dir" value="${dist.dir}"/></antcall>
	</target>

	<target name="javadoc" depends="set-buildinfo-vars">
		<javadoc sourcepath="src/java" destdir="docs/api" classpathref="class.path" access="private"
			 packagenames="com.zimbra.*" additionalparam='-tag perms:m:"Permissions Required:"'
			 breakiterator="yes" windowtitle="ZimbraServer v${zimbra.buildinfo.version}">
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
			<link href="http://java.sun.com/products/javamail/javadocs/"/>
			<link href="http://jakarta.apache.org/commons/logging/api/"/>
			<link href="http://ical4j.sourceforge.net/api/"/>
		</javadoc>
	</target>

	<target name="javacc-internal">
		<mkdir dir="${output.dir}" />
		<java classname="org.javacc.parser.Main" fork="true" classpathref="class.path" failonerror="true">
			<sysproperty key="install.root" file="${javacc.home}" />
			<arg value="-OUTPUT_DIRECTORY=${output.dir}" />
			<arg value="${target}" />
		</java>
	</target>

	<!-- invoke the "javacc" task with (target.classdir=com/foo/bar and target="gub.jj")  -->
	<target name="javacc">
		<antcall target="javacc-internal">
			<!-- <param name="output.dir" location="${generated.java.dir}/${target.classdir}"/> -->
			<param name="output.dir" location="${src.java.dir}/${target.classdir}" />
			<param name="target" location="${src.java.dir}/${target.classdir}/${target}" />
		</antcall>
	</target>

	<target name="javacc-ZimbraQueryParser">
		<antcall target="javacc">
			<param name="target.classdir" value="com/zimbra/cs/index/queryparser" />
			<param name="target" value="ZimbraQueryParser.jj" />
		</antcall>
	</target>

	<target name="set-buildinfo-vars">
		<tstamp />
		<condition property="zimbra.buildinfo.version" value="4.5">
			<not>
				<isset property="${zimbra.buildinfo.version}" />
			</not>
		</condition>
		<condition property="zimbra.buildinfo.release" value="${user.name}">
			<not>
				<isset property="${zimbra.buildinfo.release}" />
			</not>
		</condition>
		<condition property="zimbra.buildinfo.date" value="${DSTAMP}-${TSTAMP}">
			<not>
				<isset property="${zimbra.buildinfo.date}" />
			</not>
		</condition>
		<condition property="zimbra.buildinfo.host" value="${zimbra.server.hostname}">
			<not>
				<isset property="${zimbra.buildinfo.host}" />
			</not>
		</condition>
		<property name="zimbra.buildinfo.all" value="Version: ${zimbra.buildinfo.version}; Release: ${zimbra.buildinfo.release}; Built: ${zimbra.buildinfo.date}; Host: ${zimbra.buildinfo.host}"/>
		<echo>Version: ${zimbra.buildinfo.version}</echo>
	</target>

	<target name="generate-buildinfo" depends="set-buildinfo-vars">
		<mkdir dir="${build.dir}/buildinfo" />
		<echo file="${build.dir}/buildinfo/BuildInfoGenerated.java">
			package com.zimbra.cs.util;
			class BuildInfoGenerated {
				public static final String VERSION = "${zimbra.buildinfo.version}";
				public static final String RELEASE = "${zimbra.buildinfo.release}";
				public static final String DATE = "${DSTAMP}-${TSTAMP}";
				public static final String HOST = "${zimbra.buildinfo.host}";
			}
		</echo>
		<javac destdir="${build.classes.dir}" debug="true" srcdir="${build.dir}/buildinfo">
		</javac>
	</target>

	<!-- You can add more attrs.xml files from outside this project and invoke this target. -->
	<target name="generate-ldap-config" depends="set-buildinfo-vars">
		<mkdir dir="${build.dir}/attrs"/>
		<copy todir="${build.dir}/attrs" overwrite="true">
		    <fileset dir="${config.dir}/attrs" includes="*.xml"/>
		</copy>
		<mkdir dir="${build.dir}/ldap-config" />
		<java classname="com.zimbra.cs.account.AttributeManager" fork="true" classpathref="class.path" failonerror="true" >
			<sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
			<arg line="-a generateLdapSchema -i ${build.dir}/attrs -t ${config.dir}/ldap/zimbra.schema-template -o ${build.dir}/ldap-config/zimbra.schema"/>
		</java>
		<java classname="com.zimbra.cs.account.AttributeManager" fork="true" classpathref="class.path" failonerror="true">
			<sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
			<arg line="-a generateGlobalConfigLdif -i ${build.dir}/attrs -o ${build.dir}/ldap-config/zimbra_globalconfig.ldif"/>
		</java>
		<java classname="com.zimbra.cs.account.AttributeManager" fork="true" classpathref="class.path" failonerror="true">
			<sysproperty key="zimbra.version" value="${zimbra.buildinfo.all}"/>
			<arg line="-a generateDefaultCOSLdif -i ${build.dir}/attrs -o ${build.dir}/ldap-config/zimbra_defaultcos.ldif"/>
		</java>
		<copy todir="${build.dir}/ldap-config" file="${config.dir}/ldap/zimbra.ldif"/>
		<copy todir="${build.dir}/ldap-config" file="${config.dir}/ldap/zimbra_mimehandlers.ldif"/>
		<copy todir="${build.dir}/ldap-config" file="${config.dir}/ldap/amavisd.schema"/>
	</target>

	<target name="compile" depends="build-init">
		<ant dir="${common.dir}" target="jar" inheritAll="false" />
		<ant dir="${im.dir}" target="jar" inheritAll="false" />
		<javac fork="true" memorymaximumsize="256m" destdir="${build.classes.dir}" debug="true" classpathref="class.path">
			<src refid="all.java.path" />
		</javac>
		<antcall target="generate-buildinfo"/>
		<java classname="com.zimbra.cs.db.Versions" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-o ${build.dir}"/>
		</java>
	</target>

	<target name="jar" depends="compile">
		<echo>Hostname: ${zimbra.server.hostname}</echo>
		<jar destfile="${jarfile}" basedir="${build.classes.dir}" />
		<antcall target="generate-ldap-config"/>
	</target>

	<target name="clean" description="Removes any temporary files">
		<delete dir="${build.dir}" />
	</target>

	<!-- activation.jar keeps mail.jar open.  As a result, on
	     Windows you cannot undeploy because Tomcat is unable to
	     complete delete the service directory. zimbra-native.jar
	     opens a shared library so it should not be in a war file
	     which can be redeployed. Please copy
	     {mail,activation,zimbra-native}.jar to
	     $TOMCAT\common\lib -->
	<property name="war.exclude" value="${ical4j.jar},servlet-api.jar,jsp-api.jar,mail.jar,activation.jar,zimbra-native.jar,KeyView.jar"/>

	<target name="war" depends="jar">
		<echo>war.exclude=${war.exclude}</echo>
		<war warfile="${warfile}" webxml="${config.dir}/web.xml${production.suffix}">
			<fileset dir="WebRoot"/>
			<lib file="${common.jarfile}" />
			<lib file="${im.jarfile}" />
			<lib file="${jarfile}" />
			<lib dir="${common.jars.dir}" includes="*.jar" excludes="${war.exclude}" />
			<lib dir="${im.jars.dir}" includes="*.jar" excludes="${war.exclude}" />
			<classes dir="${config.dir}" includes="sieveConfig.xml" />
		</war>
	</target>

	<target name="service-deploy" depends="refresh-opt-zimbra,deploy-war,deploy-zimlets" description="Not just war file deployment, but a /opt/zimbra refresh as well!"/>

	<target name="deploy-war" depends="war">
		<echo message="Wait for tomcat to start at http://${deploy.host}:${deploy.port}/" />
		<waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<http url="http://${deploy.host}:${deploy.port}/" />
		</waitfor>
		<deploy url="http://${deploy.host}:${deploy.port}/manager/" username="zimbra" password="zimbra" path="/service" war="${warfile}" update="true" />
	</target>

	<target name="init-opt-zimbra" depends="dev-dist,localhost-ssl-cert">
		<copy todir="${zimbra.home.dir}">
			<fileset dir="${dist.dir}"/>
		</copy>	
		<chmod perm="a+rx"><fileset dir="${zimbra.home.dir}/bin"/><fileset dir="${zimbra.home.dir}/libexec"/></chmod><!-- ant does not preserve perms on copy -->
	</target>

	<target name="refresh-opt-zimbra" depends="dev-dist">
		<copy todir="${zimbra.home.dir}">
			<fileset dir="${dist.dir}">
				<exclude name="conf/localconfig.xml"/> <!-- don't trash zimbra_server_hostname -->
				<exclude name="tomcat/**"/> <!-- deploy-war instead of copying files behind tomcat's back -->
			</fileset>
		</copy>
		<chmod perm="a+rx"><fileset dir="${zimbra.home.dir}/bin"/><fileset dir="${zimbra.home.dir}/libexec"/></chmod>
	</target>

	<target name="dev-dist" depends="war,dev-dist-unix,choose-db-schema">
		<!-- bin, libexec -->
		<copy todir="${dist.dir}/bin" overwrite="true"><fileset dir="${src.dir}/bin" excludes="*.production"/></copy>
		<copy todir="${dist.dir}/libexec" overwrite="true"><fileset dir="${src.dir}/libexec" excludes="*.production"/></copy>
		<copy tofile="${dist.dir}/bin/tomcat" file="${src.dir}/bin/tomcat${production.suffix}" overwrite="true"/>
		<copy tofile="${dist.dir}/bin/ldap" file="${src.dir}/bin/ldap${production.suffix}" overwrite="true"/>
		<fixcrlf srcdir="${dist.dir}/bin" eol="unix"/>
		<fixcrlf srcdir="${dist.dir}/libexec" eol="unix"/>
		<chmod perm="a+rx"><fileset dir="${dist.dir}/bin"/><fileset dir="${dist.dir}/libexec"/></chmod>

		<!-- conf -->
		<copy tofile="${dist.dir}/conf/localconfig.xml" file="${config.dir}/localconfig.xml${production.suffix}" overwrite="true" />
		<copy tofile="${dist.dir}/conf/log4j.properties" file="${config.dir}/log4j.properties${production.suffix}" overwrite="true"/>
		<copy tofile="${dist.dir}/conf/wildfire.xml" file="${config.dir}/wildfire.xml" overwrite="true"/>
		<copy tofile="${dist.dir}/conf/timezones.ics" file="${config.dir}/timezones.ics" overwrite="true"/>
		<copy todir="${dist.dir}/conf/msgs" overwrite="true"><fileset dir="${config.dir}/msgs"/></copy>
		<copy todir="${dist.dir}/conf/attrs" overwrite="true"><fileset dir="${build.dir}/attrs"/></copy>
		<fixcrlf srcdir="${dist.dir}/conf" eol="unix" includes="**" />

		<!-- lib: ignore absence of DLL for windows -->
		<copy todir="${dist.dir}/lib/jars" overwrite="true"><fileset dir="${common.jars.dir}" includes="*.jar" excludes="servlet-api.jar" /></copy>
		<copy todir="${dist.dir}/lib/jars" overwrite="true"><fileset dir="${im.jars.dir}" includes="*.jar" /></copy>
		<copy todir="${dist.dir}/lib/jars" file="${common.jarfile}" overwrite="true"/>
		<copy todir="${dist.dir}/lib/jars" file="${im.jarfile}" overwrite="true"/>
		<copy todir="${dist.dir}/lib/jars" file="${jarfile}" overwrite="true"/>
		
		<!-- tomcat -->
		<copy todir="${dist.dir}/tomcat/webapps" file="${warfile}" overwrite="true"/>
		<copy tofile="${dist.dir}/tomcat/conf/server.xml" file="${config.dir}/tomcat-5.5/server.xml${production.suffix}" overwrite="true"/>
		<copy tofile="${dist.dir}/tomcat/conf/context.xml" file="${config.dir}/tomcat-5.5/context.xml" overwrite="true"/>
		<copy todir="${dist.dir}/tomcat/conf" file="${config.dir}/tomcat-5.5/tomcat-users.xml" overwrite="true"/>
		<copy todir="${dist.dir}/tomcat/conf" file="${config.dir}/tomcat-5.5/web.xml" overwrite="true"/>
		<copy todir="${dist.dir}/tomcat/common/lib" overwrite="true"><fileset dir="${common.jars.dir}" includes="${ical4j.jar},mail.jar,activation.jar,zimbra-native.jar" /></copy>
		<copy todir="${dist.dir}/tomcat/common/endorsed" file="${common.jars.dir}/zimbra-charset.jar" overwrite="true"/>

		<!-- openldap -->
		<copy tofile="${dist.dir}/${slapd.conf.dir}/slapd.conf" file="${slapd.conf.src}" overwrite="true"/> <!-- CHECK this is ok with dev build -->
		<copy todir="${dist.dir}/${slapd.etc.dir}" overwrite="true"><fileset dir="${build.dir}/ldap-config" includes="*.ldif"/></copy>
		<copy todir="${dist.dir}/${slapd.etc.dir}/schema" overwrite="true"><fileset dir="${build.dir}/ldap-config" includes="*.schema"/></copy>

		<!-- db schema -->
		<copy todir="${dist.dir}/db" overwrite="true"><fileset dir="${src.dir}/db" includes="*.sql" excludes="db.sql,create_database.sql"/></copy>
		<copy todir="${dist.dir}/db" overwrite="true"><fileset dir="${db.schema.dir}" includes="db.sql,create_database.sql"/></copy>
		<copy todir="${dist.dir}/db" file="${build.dir}/versions-init.sql" overwrite="true"/>

		<!-- wikis -->
		<copy todir="${dist.dir}/wiki" overwrite="true"><fileset dir="data/wiki" includes="**"/></copy>
	</target>

	<target name="dev-dist-unix" if="is-unix">
		<copy tofile="${dist.dir}/lib/libzimbra-native.${native.so}" file="${lib.dir}/libzimbra-native.${native.so}.${native.os}.${os.arch}" verbose="true" failonerror="false" overwrite="true"/>	
	</target>

	<!-- There are two ways to reset the world:
  		(a) If your tomcat is a service, use "reset-the-world".
 		(b) If your tomcat is inside eclipse then do this:
			1. stop tomcat
			2. run the target "reset-the-world-stage1"
			3. start tomcat
			4. run the target "reset-the-world-stage2" -->
	<target name="reset-the-world" depends="reset-the-world-stage1,start-tomcat, reset-the-world-stage2" 
		description="Reset the world"/>

	<target name="reset-the-world-stage1" depends="clean,jar,init" description="Run when tomcat is stopped." />

	<target name="reset-the-world-stage2" depends="service-deploy,init-wiki,inject" description="Run when tomcat is running." />

	<target name="init" depends="stop-servers,db-init,dir-init,init-opt-zimbra,start-ldap,ldap-load" />

	<target name="inject" depends="compile">
		<echo>Inserting default contacts: user1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.soap.SoapTestHarness" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-f data/soap/samplecontacts.xml" />
		</java>
		<echo>Creating default search folders: user1@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.soap.SoapTestHarness" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-f data/soap/samplesearchfolders.xml" />
		</java>
		<echo message="Wait for lmtp host=${lmtp.host} port=${lmtp.port}" />
		<waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<socket server="${lmtp.host}" port="${lmtp.port}" />
		</waitfor>
		<echo>LmtpInject messages</echo>
		<java classname="com.zimbra.cs.lmtpserver.utils.LmtpInject" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-t ${lmtpinject.numthreads} -a ${lmtp.host} -p ${lmtp.port} -r user1@${zimbra.server.hostname} -s ho@example.zimbra.com -d" />
			<arg path="data/TestMailRaw" />
		</java>
		<echo>Importing Wiki documents for user1</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-l impn user1@${zimbra.server.hostname} test123 data/wiki/user1 /" />
		</java>
	</target>

	<target name="inject-npscontacts" depends="compile">
		<echo>Inserting NPS contacts: user4@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.soap.SoapTestHarness" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-f data/soap/nps-contacts-orig.xml" />
		</java>
	</target>

	<target name="import-wiki-templates">
		<echo>Importing Wiki templates from ${data.wiki.dir}/Template</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-l impn wiki@${zimbra.server.hostname} test123 data/wiki/Template Template" />
		</java>
	</target>

	<target name="init-wiki">
		<echo>Initializing wiki@${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="in ${wiki.user.default}@${zimbra.server.hostname} test123 data/wiki/Template Template" />
		</java>
	</target>

	<!-- Insert one directory (data/testmsgs) of mail -->
	<target name="inject1" depends="compile">
		<echo message="Wait for lmtp host=${lmtp.host} port=${lmtp.port}" />
		<waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second">
			<socket server="${lmtp.host}" port="${lmtp.port}" />
		</waitfor>
		<echo>LmtpInject messages</echo>
		<java classname="com.zimbra.cs.lmtpserver.utils.LmtpInject" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-t ${lmtpinject.numthreads} -a ${lmtp.host} -p ${lmtp.port} -r user1@${zimbra.server.hostname} -s user1@example.zimbra.com -d" />
			<arg path="data/testmsg" />
		</java>
	</target>

	<target name="localhost-ssl-cert">
		<delete failonerror="no">
			<fileset dir="${tomcat.home.dir}/conf" includes="keystore" />
		</delete>
		<genkey alias="tomcat" storepass="zimbra" keyalg="rsa" verbose="false" keystore="${tomcat.home.dir}/conf/keystore" validity="365">
			<dname>
				<param name="CN" value="localhost" />
				<param name="OU" value="Engineering" />
				<param name="O" value="Zimbra Systems" />
				<param name="C" value="US" />
			</dname>
		</genkey>
		<genkey alias="tomcat-dsa" storepass="zimbra" keyalg="dsa" verbose="false" keystore="${tomcat.home.dir}/conf/keystore" validity="365">
			<dname>
				<param name="CN" value="localhost" />
				<param name="OU" value="Engineering" />
				<param name="O" value="Zimbra Systems" />
				<param name="C" value="US" />
			</dname>
		</genkey>
	</target>

	<target name="dir-init">
		<echo message="If the following deletes fail, wait for your tomcat" />
		<echo message="to stop (or stop your tomcat as the case may be)" />
		<echo message="and try again later." />
		<delete failonerror="no">
			<fileset dir="${zimbra.home.dir}/db" excludes="data/**"/>
		</delete>
		
		<delete dir="${zimbra.home.dir}/store" />
		<delete dir="${zimbra.home.dir}/index" />
		<delete dir="${zimbra.home.dir}/redolog" />
		<delete dir="${zimbra.home.dir}/backup" />
		<delete dir="${zimbra.home.dir}/lib/ext" />
		<delete dir="${zimbra.home.dir}/conf/msgs" />
		<delete failonerror="no">
			<fileset dir="${zimbra.home.dir}/log" includes="*.log" />
		</delete>
		<delete failonerror="no">
			<fileset dir="${tomcat.home.dir}/logs" includes="*" />
		</delete>
		<delete dir="${tomcat.home.dir}/webapps/service"/>
		<delete file="${tomcat.home.dir}/webapps/service.war"/>
		<delete dir="${zimbra.home.dir}/openldap/var/openldap-data" />

		<mkdir dir="${zimbra.home.dir}/openldap/var/openldap-data" />
		<mkdir dir="${zimbra.home.dir}/log" />
		<mkdir dir="${zimbra.home.dir}/store" />
		<mkdir dir="${zimbra.home.dir}/index" />
		<mkdir dir="${zimbra.home.dir}/redolog" />
		<mkdir dir="${zimbra.home.dir}/redolog/archive" />
		<mkdir dir="${zimbra.home.dir}/backup" />
		<antcall target="make-dirs"><param name="base.dir" value="${zimbra.home.dir}"/></antcall>
	</target>

	<target name="choose-db-schema">
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="class.path"
			  outputproperty="LC.mbox.group.disabled" failonerror="true">
			<arg line="-q -c conf/localconfig.xml -m nokey debug_disable_mailbox_group"/>
		</java>
		<condition property="db.schema.dir" value="src/db/old_schema">
			<equals arg1="${LC.mbox.group.disabled}" arg2="true" casesensitive="false" trim="true"/>
		</condition>
		<condition property="db.schema.dir" value="src/db">
			<not><isset property="db.schema.dir"/></not>
		</condition>
		<echo>Using database schema in ${db.schema.dir}</echo>
	</target>

	<target name="db-init" depends="choose-db-schema" >
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:7306/" userid="root" password="zimbra"
			 classpathref="class.path" onerror="continue" src="src/db/dropdb.sql" />
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:7306/" userid="root" password="zimbra"
			 classpathref="class.path" onerror="abort" src="${db.schema.dir}/db.sql" />
		<sql driver="com.mysql.jdbc.Driver" url="jdbc:mysql://localhost:7306/" userid="root" password="zimbra"
			 classpathref="class.path" onerror="abort" src="${build.dir}/versions-init.sql" />
	</target>

	<target name="ldap-setup-preauth">
		<echo>Creating preauth key: ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="gdpak ${zimbra.server.hostname}" />
		</java>
	</target>
    <!-- description="run this target if you have updated the schema files in /opt/zimbra, and you have generated new ldifs" -->
	<target name="refresh-ldap" >
		<antcall target="stop-tomcat"/>
		<antcall target="stop-ldap"/>
		<sleep seconds="2"/> <!-- sometimes start occurs too fast... -->
		<antcall target="start-ldap"/>
		<antcall target="start-tomcat"/>
		<antcall target="ldap-modify"><param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_globalconfig.ldif"/></antcall>
		<antcall target="ldap-modify"><param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_defaultcos.ldif"/></antcall>
		<antcall target="ldap-modify"><param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_mimehandlers.ldif"/></antcall>
	</target>
	
	<target name="ldap-add">
		<echo>Loading ${ldif.file}</echo>
		<exec failonerror="true" executable="${ldapmodify}" >
			<arg line="-a -c -w zimbra -D uid=zimbra,cn=admins,cn=zimbra -x -f ${ldif.file}"/>
		</exec>
	</target>
	
	<target name="ldap-modify">
		<echo>Loading ${ldif.file}</echo>
		<exec failonerror="true" executable="${ldapmodify}" >
			<arg line="-c -w zimbra -D uid=zimbra,cn=admins,cn=zimbra -x -f ${ldif.file}"/>
		</exec>
	</target>
	
	<target name="ldap-load" depends="zmprov-commands">
		<antcall target="ldap-add"><param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra.ldif"/></antcall>
		<antcall target="ldap-modify"><param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_globalconfig.ldif"/></antcall>
		<antcall target="ldap-add"><param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_defaultcos.ldif"/></antcall>
		<antcall target="ldap-add"><param name="ldif.file" value="${dist.dir}/${slapd.etc.dir}/zimbra_mimehandlers.ldif"/></antcall>
		<echo>Editing localconfig zimbra_server_hostname to be ${zimbra.server.hostname}</echo>
		<java classname="com.zimbra.common.localconfig.Main" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-e zimbra_server_hostname=${zimbra.server.hostname}"/>
		</java>
		<echo>Running zmprov commands</echo>
		<java classname="com.zimbra.cs.account.ProvUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-l -f ${build.zmprov} -v" />
		</java>
	</target>

	<target name="zmprov-commands" depends="build-init">
		
		<echo file="${build.zmprov}">		
		ModifyConfig zimbraLogHostname ${zimbra.server.hostname}
		CreateServer ${zimbra.server.hostname} \
			zimbraSmtpHostname ${zimbra.smtp.host} \
			zimbraMailPort 7070 \
			zimbraMailMode http \
			zimbraImapCleartextLoginEnabled TRUE
		ModifyServer ${zimbra.server.hostname} \
			zimbraServiceInstalled ldap \
			zimbraServiceInstalled mta \
			zimbraServiceInstalled mailbox
		ModifyServer ${zimbra.server.hostname} \
			zimbraServiceEnabled ldap \
			zimbraServiceEnabled mta \
			zimbraServiceEnabled mailbox
		cd ${zimbra.server.hostname}
		mcf zimbraDefaultDomainName ${zimbra.server.hostname}
		mc default zimbraFeatureIMEnabled TRUE
		ca admin@${zimbra.server.hostname} test123 \
			zimbraMailHost ${zimbra.server.hostname} \
			cn 'Administrator' displayName 'Administrator' \
			zimbraIsAdminAccount TRUE \
			zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
			zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
			telephoneNumber '+1 650 555 0000'
		ca user1@${zimbra.server.hostname} test123 \
			zimbraMailHost ${zimbra.server.hostname} \
			cn 'Demo User One' \
			displayName 'Demo User One' \
			zimbraMailQuota 62914560 \
			zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
			zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
			telephoneNumber '+1 650 555 1111'
		ca user2@${zimbra.server.hostname} test123 \
			zimbraMailHost ${zimbra.server.hostname} \
			cn 'Demo User Two' \
			displayName 'Demo User Two' \
			zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
			zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
			telephoneNumber '+1 650 555 2222'
		ca user3@${zimbra.server.hostname} test123 \
			zimbraMailHost ${zimbra.server.hostname} \
			cn 'Demo User Three' \
			displayName 'Demo User Three' \
			zimbraAttachmentsIndexingEnabled FALSE \
			zimbraPrefTimeZoneId '(GMT-05.00) Eastern Time (US &amp; Canada)' \
			zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
			telephoneNumber '+1 650 555 3333'
		ca user4@${zimbra.server.hostname} test123 \
			zimbraMailHost ${zimbra.server.hostname} \
			cn 'Demo User Four' \
			displayName 'Demo User Four' \
			zimbraAttachmentsIndexingEnabled FALSE \
			zimbraPrefTimeZoneId '(GMT-07.00) Arizona' \
			zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy} \
			telephoneNumber '+1 650 555 4444'
		ca spam-sink@${zimbra.server.hostname} test123 \
			zimbraMailHost ${zimbra.server.hostname} \
			zimbraAttachmentsIndexingEnabled FALSE \
			zimbraMailQuota 0 \
			zimbraHideInGal TRUE
		mcf zimbraSpamIsSpamAccount spam-sink@${zimbra.server.hostname}
		ca ham-sink@${zimbra.server.hostname} test123 \
			zimbraMailHost ${zimbra.server.hostname} \
			zimbraAttachmentsIndexingEnabled FALSE \
			zimbraMailQuota 0 \
			zimbraHideInGal TRUE
		mcf zimbraSpamIsNotSpamAccount ham-sink@${zimbra.server.hostname}
		ccr room-mississippi@${zimbra.server.hostname} test123 \
					       displayName 'Mississippi Conference Room' \
						   description 'Projector, DVD' \
						   zimbraNotes 'The door squeaks.' \
					       zimbraCalResType Location \
						   zimbraCalResAutoAcceptDecline TRUE \
						   zimbraCalResAutoDeclineIfBusy TRUE \
						   zimbraCalResAutoDeclineRecurring FALSE \
						   zimbraCalResLocationDisplayName 'Site: HQ, Building: A, Floor: 11, Room 1101' \
						   zimbraCalResSite HQ \
						   zimbraCalResBuilding A \
						   zimbraCalResFloor 11 \
						   zimbraCalResRoom 1101 \
						   zimbraCalResCapacity 10 \
						   zimbraCalResContactName 'Administrator' \
						   zimbraCalResContactEmail admin@${zimbra.server.hostname} \
						   zimbraCalResContactPhone '(650)555-1212' \
						   street '1500 Fashion Island Blvd., Suite 100' \
						   l 'San Mateo' \
						   st 'California' \
						   postalCode 94404 \
						   co USA \
					       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
					       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
		ccr room-amazon@${zimbra.server.hostname} test123 \
					       displayName 'Amazon Conference Room' \
						   description 'TV, VCR; room is always available' \
					       zimbraNotes 'A/C not working well' \
					       zimbraCalResType Location \
						   zimbraCalResAutoAcceptDecline TRUE \
						   zimbraCalResAutoDeclineIfBusy FALSE \
						   zimbraCalResAutoDeclineRecurring FALSE \
						   zimbraCalResLocationDisplayName 'Room 1201, 2nd Floor of Building A at HQ' \
						   zimbraCalResSite HQ \
						   zimbraCalResBuilding A \
						   zimbraCalResFloor 12 \
						   zimbraCalResRoom 1202 \
						   zimbraCalResCapacity 20 \
						   zimbraCalResContactName 'Administrator' \
						   zimbraCalResContactEmail admin@${zimbra.server.hostname} \
						   zimbraCalResContactPhone '(650)555-1212' \
					       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
					       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
		ccr room-nile@${zimbra.server.hostname} test123 \
					       displayName 'Nile Conference Room' \
						   description 'Projector; for single meetings only' \
						   zimbraNotes 'need to get some more chairs in here' \
					       zimbraCalResType Location \
						   zimbraCalResAutoAcceptDecline TRUE \
						   zimbraCalResAutoDeclineIfBusy TRUE \
						   zimbraCalResAutoDeclineRecurring TRUE \
						   zimbraCalResLocationDisplayName 'Room B201, 2nd basement floor, HQ Building B' \
						   zimbraCalResSite HQ \
						   zimbraCalResBuilding B \
						   zimbraCalResFloor B2 \
						   zimbraCalResRoom B201 \
						   zimbraCalResCapacity 100 \
						   zimbraCalResContactName 'Administrator' \
						   zimbraCalResContactEmail admin@${zimbra.server.hostname} \
						   zimbraCalResContactPhone '(650)555-1212' \
					       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
					       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
		ccr projector1@${zimbra.server.hostname} test123 \
					       displayName 'Projector' \
						   description '800x600 max resolution' \
						   zimbraNotes 'usually works okay' \
					       zimbraCalResType Equipment \
						   zimbraCalResAutoAcceptDecline FALSE \
						   zimbraCalResAutoDeclineIfBusy FALSE \
						   zimbraCalResAutoDeclineRecurring FALSE \
						   zimbraCalResLocationDisplayName 'HQ Building B, B2 floor' \
						   zimbraCalResSite HQ \
						   zimbraCalResBuilding B \
						   zimbraCalResFloor B2 \
						   zimbraCalResRoom B201 \
						   zimbraCalResContactName 'Administrator' \
						   zimbraCalResContactEmail admin@${zimbra.server.hostname} \
						   zimbraCalResContactPhone '(650)555-1212' \
					       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
					       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
		ccr pencil1@${zimbra.server.hostname} test123 \
					       displayName '#2 pencil' \
						   description 'a writing tool' \
					       zimbraNotes 'must occasionally be sharpened' \
					       zimbraCalResType Equipment \
						   zimbraCalResAutoAcceptDecline TRUE \
						   zimbraCalResAutoDeclineIfBusy TRUE \
						   zimbraCalResAutoDeclineRecurring TRUE \
						   street '1500 Fashion Island Blvd, Suite 100' \
						   l 'San Mateo' \
					       st CA \
					       postalCode 94404 \
					       co USA \
						   zimbraCalResContactName 'Administrator' \
						   zimbraCalResContactEmail admin@${zimbra.server.hostname} \
						   zimbraCalResContactPhone '(650)555-1212' \
					       zimbraPrefTimeZoneId '(GMT-08.00) Pacific Time (US &amp; Canada)' \
					       zimbraPrefGroupMailBy ${zimbra.prefGroupMailBy}
		</echo>
	</target>

	<target name="deploy-zimlets" if="dist.zimlet.dir">
		<foreach target="install-zimlet" param="zimlet">
			<path>
				<fileset dir="${zimlet.dir}/zimlets" includes="**/*.zip"/>
			</path>
			<param name="action" value="deploy"/>
		</foreach>
	</target>

	<target name="install-zimlet">
		<echo>${action} ${zimlet}</echo>
		<java classname="com.zimbra.cs.zimlet.ZimletUtil" fork="true" classpathref="class.path" failonerror="true">
			<arg line="-q" />
			<arg line="${action}" />
			<arg file="${zimlet}" />
		</java>
	</target>
	
	<target name="stop-servers" depends="stop-tomcat,stop-ldap" />

	<!-- LDAP service control -->
	<target name="stop-ldap" depends="stop-ldap-windows,stop-ldap-unix" />

	<target name="stop-ldap-windows" if="is-windows">
		<exec executable="net">
			<arg value="stop" />
			<arg value="openldap directory service" />
		</exec>
	</target>

	<target name="stop-ldap-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/ldap">
			<arg value="stop" />
		</exec>
	</target>

	<target name="start-ldap" depends="start-ldap-windows,start-ldap-unix" />

	<target name="start-ldap-windows" if="is-windows">
		<exec executable="net">
			<arg value="start" />
			<arg value="openldap directory service" />
		</exec>
	</target>

	<target name="start-ldap-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/ldap">
			<arg value="start" />
		</exec>
	</target>

	<!-- Tomcat service control -->
	<target name="restart-tomcat" depends="stop-tomcat,start-tomcat" description="Restart Tomcat"/>

	<target name="stop-tomcat" depends="stop-tomcat-windows,stop-tomcat-unix"/>

	<target name="stop-tomcat-windows" if="is-windows">
		<exec executable="net">
			<arg value="stop" />
			<arg value="apache tomcat" />
		</exec>
		<!-- Wait for Tomcat to really go away. -->
		<echo>Waiting for tomcat to stop</echo>
		<waitfor checkevery="1" checkeveryunit="second" maxwait="10" maxwaitunit="second">
			<not>
				<http url="http://${deploy.host}:${deploy.port}/" />
			</not>
		</waitfor>
	</target>

	<target name="stop-tomcat-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/tomcat">
			<arg value="stop" />
		</exec>
	</target>

	<target name="start-tomcat" depends="start-tomcat-windows,start-tomcat-unix" />

	<target name="start-tomcat-windows" if="is-windows">
		<exec executable="net">
			<arg value="start" />
			<arg value="apache tomcat" />
		</exec>
	</target>

	<target name="start-tomcat-unix" if="is-unix">
		<exec executable="${zimbra.home.dir}/bin/tomcat">
			<arg value="start" />
		</exec>
	</target>
  <!-- description="Dummy Target used by project_builder to force eclipse to refresh"  -->
	<target name="empty" />
</project>
