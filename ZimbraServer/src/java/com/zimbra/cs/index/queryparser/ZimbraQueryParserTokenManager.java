/* Generated By:JavaCC: Do not edit this line. ZimbraQueryParserTokenManager.java */
package com.zimbra.cs.index.queryparser;
import java.util.TimeZone;
import java.util.Locale;
import com.zimbra.cs.index.*;
import com.zimbra.cs.mailbox.Mailbox;
import com.zimbra.common.service.ServiceException;
import com.zimbra.cs.service.util.ItemId;
import com.zimbra.cs.mailbox.MailServiceException;
import org.apache.lucene.analysis.Analyzer;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

public class ZimbraQueryParserTokenManager implements ZimbraQueryParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 70);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAdd(1);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 71)
                        kind = 71;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  kind = 72;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  kind = 72;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3f8ffe27effffc00L) != 0L)
         {
            jjmatchedKind = 64;
            return 27;
         }
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 64;
            return 18;
         }
         if ((active0 & 0x70000810000000L) != 0L)
         {
            jjmatchedKind = 64;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x3ffffe3ffffffc00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
            return 27;
         }
         return -1;
      case 2:
         if ((active0 & 0x3fffee3fdf7afc00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
            return 27;
         }
         return -1;
      case 3:
         if ((active0 & 0x3fffea3f5d7afc00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
            return 27;
         }
         return -1;
      case 4:
         if ((active0 & 0x17ffaa1a1468fc00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
            return 27;
         }
         return -1;
      case 5:
         if ((active0 & 0x177faa101468cc00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 5;
            return 27;
         }
         return -1;
      case 6:
         if ((active0 & 0x73f8a001440cc00L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 6;
            return 27;
         }
         return -1;
      case 7:
         if ((active0 & 0x53f800014400000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 7;
            return 27;
         }
         return -1;
      case 8:
         if ((active0 & 0x17800010000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active0 & 0x14800010000000L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 9;
            return 27;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjStopAtPos(0, 73);
      case 34:
         return jjStopAtPos(0, 4);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 43:
         return jjStopAtPos(0, 62);
      case 45:
         return jjStopAtPos(0, 63);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x70000810000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20fc00000048400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xc0000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x6000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4220000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000021800000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400380200001000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3000022000000800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80040008590000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 123:
         return jjStopAtPos(0, 3);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400c2000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x500081500000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80002004000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1806000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x320fe00200598400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x220000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20001000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000010000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000800L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100008000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(2, 18);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20400000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000100000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000480000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000001000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xfc00200008400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000008000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80002000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4c0000850000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000080000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 25);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 31);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000010000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x284c000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80020000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000220000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400480000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x303000020000a400L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0xfc00000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x3f800000000000L);
      case 58:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(4, 17);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(4, 20);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 24);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 32);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(4, 34);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(4, 46);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(4, 59);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(4, 61);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200080000008000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000001000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x80200000000c00L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x140000000482000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800004000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(5, 33);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 35);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 55);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000004000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000208800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x28021000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000480000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x140000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x14000000000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 36);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(6, 45);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(6, 54);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(6, 60);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x14004000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x414000000008c00L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(7, 11);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(7, 41);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(7, 43);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(7, 57);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x414000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x28000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x14000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(8, 22);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(8, 26);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(8, 51);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(8, 53);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(8, 56);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(8, 58);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x800010000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x14000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(9, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(9, 49);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x14800010000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(10, 28);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(10, 47);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(10, 50);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(10, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 27:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               case 18:
                  if ((0xfbfffcfaffffd9ffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               case 2:
                  if ((0xfbffd4faffffd9ffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 33)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 38 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 33 && kind > 7)
                     kind = 7;
                  break;
               case 13:
                  if (curChar == 58)
                     kind = 38;
                  break;
               case 26:
                  if ((0xfbffd4faffffd9ffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(27);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 18:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(27);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 2:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                     jjCheckNAdd(27);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 0:
                  if ((0x1000000010L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 124 && kind > 6)
                     kind = 6;
                  break;
               case 8:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x10000000100000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
               case 20:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 27:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               case 18:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 125:
         return jjStopAtPos(0, 67);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(1);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 69;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0xdfffffffffffffffL & l) == 0L)
                     break;
                  kind = 69;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\50", "\51", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\53", "\55", null, null, null, null, null, 
null, null, null, null, "\15", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "BRACES_STATE", 
   "QUOTED_STATE", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffe7fffffffe1L, 0x3b1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x48L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[28];
private final int[] jjstateSet = new int[56];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public ZimbraQueryParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ZimbraQueryParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 3 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          SwitchTo(BRACES_STATE);
         break;
      case 4 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             SwitchTo(QUOTED_STATE);
         break;
      case 67 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           SwitchTo(DEFAULT);
         break;
      case 70 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 68 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   SwitchTo(DEFAULT);
         break;
      case 71 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  SwitchTo(DEFAULT);
         break;
      default : 
         break;
   }
}
}
