#!/usr/bin/perl -w
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite Server.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2007 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 

# Periodically print CPU stats obtained from /proc/stat.
# The first line of /proc/stat output, "cpu", gives total CPU times since boot.
# The ensuing "cpuN" lines report the same info per CPU.
# Seven numbers are reported on each CPU line:
#
#   user
#   nice
#   system
#   idle
#   iowait
#   irq
#   softirq
#
# This script converts these into %util since last time slice.

use strict;
use Getopt::Long;
use Zimbra::Mon::Zmstat;

zmstatInit();

my $STAT = '/proc/stat';
my @FIELDS = ('user', 'nice', 'sys', 'idle', 'iowait', 'irq', 'softirq');
my $NUM_CPUS;
my @PREV_VALS;

my ($CONSOLE, $LOGFH, $LOGFILE, $HEADING, $ROTATE_DEFER, $ROTATE_NOW);

sub getHeading() {
    my $heading = 'timestamp';
    my $i;
    for ($i = 0; $i <= $NUM_CPUS; $i++) {
        my $cpu = $i == 0 ? 'cpu' : sprintf("cpu%d", $i - 1);
        my $j;
        for ($j = 0; $j < scalar(@FIELDS); $j++) {
            my $col = "$cpu:" . $FIELDS[$j];
            $heading .= ", $col";
        }
    }
    return $heading;
}

sub init() {
    my $cpus = 0;
    my $line;
    open(STAT, "< $STAT") or die "Can't open $STAT: $!";
    while (defined($line = <STAT>)) {
        chomp($line);
        last if ($line !~ /^cpu/);
        my @fields = split(/\s+/, $line);
        if ($fields[0] =~ /cpu(\d+)/) {
            $cpus++;
        }
    }
    close(STAT);
    $NUM_CPUS = $cpus;
    @PREV_VALS = ();
    my $i;
    for ($i = 0; $i <= $NUM_CPUS; $i++) {
        # total, user, nice, system, idle, iowait, irq, softirq
        push(@PREV_VALS, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}

sub getCpuStat() {
    my @utils;
    my $line;
    my $cpu = 0;
    open(STAT, "< $STAT") or die "Can't open $STAT: $!";
    while (defined($line = <STAT>)) {
        chomp($line);
        last if ($line !~ /^cpu/);
        my @fields = split(/\s+/, $line);
        my $total = 0;
        my $i;
        for ($i = 1; $i <= 7; $i++) {
            $total += $fields[$i];
        }
        my $total_delta = $total - $PREV_VALS[$cpu];
        $PREV_VALS[$cpu] = $total;
        for ($i = 1; $i <= 7; $i++) {
            my $delta = $fields[$i] - $PREV_VALS[$cpu + $i];
            my $pct = percent($delta, $total_delta);
            push(@utils, $pct);
            $PREV_VALS[$cpu + $i] = $fields[$i];
        }
        $cpu += 8;
    }
    close(STAT);
    return join(', ', @utils);
}

sub usage() {
    print STDERR <<_USAGE_;
Usage: zmstat-cpu [options]
Monitor CPU activity
-i, --interval: output a line every N seconds (default is 10)
-l, --log:      log file (default is /opt/zimbra/zmstat/cpu.csv)
-c, --console:  output to stdout

If logging to a file, rotation occurs when HUP signal is sent or when
date changes.  Current log is renamed to <dir>/YYYY-MM-DD/cpu.csv
and a new file is created.
_USAGE_
    exit(1);
}

sub sighup {
    if (!$CONSOLE) {
        if (!$ROTATE_DEFER) {
            $LOGFH = rotateLogFile($LOGFH, $LOGFILE, $HEADING);
        } else {
            $ROTATE_NOW = 1;
        }
    }
}



#
# main
#

$| = 1; # Flush immediately

my $interval = 10;
my $opts_good = GetOptions(
    'interval=i' => \$interval,
    'log=s' => \$LOGFILE,
    'console' => \$CONSOLE
    );
if (!$opts_good) {
    print STDERR "\n";
    usage();
}

if (!defined($LOGFILE) || $LOGFILE eq '') {
    $LOGFILE = getLogFilePath('cpu.csv');
} elsif ($LOGFILE eq '-') {
    $CONSOLE = 1;
}
if ($CONSOLE) {
    $LOGFILE = '-';
}

createPidFile('zmstat-cpu.pid');

$SIG{HUP} = \&sighup;

init();
$HEADING = getHeading();
$LOGFH = openLogFile($LOGFILE, $HEADING);

my $date = getDate();
waitUntilNiceRoundSecond($interval);

while (1) {
    my $cpuinfo = getCpuStat();

    my $tstamp = getTstamp();
    my $currDate = getDate();
    if ($currDate ne $date) {
        $LOGFH = rotateLogFile($LOGFH, $LOGFILE, $HEADING, $date);
        $date = $currDate;
    }

    # Don't allow rotation in signal handler while we're writing.
    $ROTATE_DEFER = 1;
    $LOGFH->print("$tstamp, $cpuinfo\n");
    $LOGFH->flush();
    $ROTATE_DEFER = 0;
    if ($ROTATE_NOW) {
        # Signal handler delegated rotation to main.
        $ROTATE_NOW = 0;
        $LOGFH = rotateLogFile($LOGFH, $LOGFILE, $HEADING);
    }

    sleep($interval);
}
close($LOGFH);
