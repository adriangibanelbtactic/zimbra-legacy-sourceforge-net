#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite Server.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2005, 2006 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 

use strict;
my $zimbra_home = "/opt/zimbra";

use lib "/opt/zimbra/zimbramon/lib";
use  Zimbra::Util::Common;
use Zimbra::Mon::Logger;

# Exit if software-only node.
exit(0) unless (-f "${zimbra_home}/conf/localconfig.xml");

$SIG{ALRM} = \&catchAlarm;

my $platform=`${zimbra_home}/libexec/get_plat_tag.sh`;
chomp $platform;

my $pidFile="${zimbra_home}/log/zmstatuslog.pid";

my $TIMEOUT=60;
my $MNTCMD;
my $DFCMD;
if ($platform eq "MACOSX") {
	$MNTCMD = "mount -t hfs";
	$DFCMD = "df -ml ";
} else {
	$MNTCMD = "mount -t ext3";
	$DFCMD = "df -ml ";
}

my $dt = `date "+%Y-%m-%d %H:%M:%S"`;
chomp $dt;

my $hostname;

checkPid();
logStatus();
clearPid();

exit 0;

sub logStatus {
	my @status = ();
  alarm($TIMEOUT);
	open STATUS, "${zimbra_home}/bin/zmcontrol status |" or die "Can't get status: $!";
	@status = <STATUS>;
	close STATUS;
	foreach my $s (@status) {
		if ($s =~ /is not/) {
			next;
		}
		chomp $s;
		if ($s =~ /^Host (.*)/) {
			$hostname = $1;
			next;
		}
		my ($service, $stat) = split ' ', $s;
		Zimbra::Mon::Logger::Log( "info", "$dt, STATUS: ${hostname}: $service: $stat" );
	}
  alarm(0);
}

sub checkPid {
  if (-f "$pidFile") {
    my $P = `cat $pidFile`;
    chomp $P;
    if ($P ne "") {
      system("kill -0 $P 2> /dev/null");
      if ($? == 0) {
        print "$0 already running with pid $P\n";
        exit 0;
      }
    }
  }
  `echo $$ > "$pidFile"`;
}

sub clearPid {
  unlink($pidFile);
}

sub catchAlarm {
		Zimbra::Mon::Logger::Log( "info", "zmstatuslog timeout after $TIMEOUT seconds"); 
    exit 1;
}
