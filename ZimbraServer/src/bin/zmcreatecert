#!/bin/bash
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite Server.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2005, 2006 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
if [ x`whoami` != "xzimbra" ]; then
  echo "$0 must be run as user zimbra"
  exit 1
fi

source `dirname $0`/zmshutil || exit 1
zmsetvars \
  zimbra_home \
  zimbra_server_hostname \
  zimbra_log_directory \
  zimbra_tmp_directory \
  zimbra_java_home \
  mailboxd_server \
  mailboxd_directory \
  mailboxd_keystore


zimbra_ssl_directory=${zimbra_home}/ssl/ssl
export JAVA_HOME=${zimbra_java_home}

mkdir -p ${zimbra_tmp_directory}
export HOME=${zimbra_tmp_directory}
export RANDFILE=${zimbra_tmp_directory}/.rnd
touch $RANDFILE

zimbra_conf_directory=${zimbra_home}/conf
if [ x"${mailboxd_server}" = "x" ]; then
 mailboxd_server=jetty
fi 
if [ x"${mailboxd_server}" = "xtomcat" ]; then
  mailboxd_conf_directory=${mailboxd_directory}/conf
else 
  mailboxd_conf_directory=${mailboxd_directory}/etc
fi

if [ x"${mailboxd_keystore}" = "x" ]; then
  mailboxd_keystore=${mailboxd_conf_directory}/keystore
fi

if [ ! -d "${mailboxd_conf_directory}" ]; then
  mkdir -p ${mailboxd_conf_directory} 2> /dev/null
  if [ $? != 0 ]; then
    echo "${mailboxd_conf_directory} doesn't exist." && exit 1
  fi
fi

zimbra_ssl_directory=${zimbra_home}/ssl/ssl

if [ -f "${zimbra_java_home}/lib/security/cacerts" ]; then
	CACERTS=${zimbra_java_home}/lib/security/cacerts
else
	CACERTS=${zimbra_java_home}/jre/lib/security/cacerts
fi

mkdir -p ${zimbra_ssl_directory}/ca
mkdir -p ${zimbra_ssl_directory}/cert
mkdir -p ${zimbra_ssl_directory}/server

rm -rf ${zimbra_ssl_directory}/newCA
mkdir -p ${zimbra_ssl_directory}/newCA/newcerts
touch ${zimbra_ssl_directory}/newCA/index.txt

mkdir -p ${mailboxd_conf_directory}


if [ "x$1" != "x" ]; then
	zimbra_server_hostname=$1
	shift;
fi

if [ x"${zimbra_server_hostname}" = "x" ]; then
  zimbra_server_hostname=`${zimbra_home}/bin/zmhostname`
fi

createConf() {
	ALTNAMES=""
	for alt in $*; do
		if [ "x$ALTNAMES" = "x" ]; then
			ALTNAMES="subjectAltName = DNS:${zimbra_server_hostname},DNS:${alt}"
		else
			ALTNAMES="${ALTNAMES},DNS:${alt}"
		fi
	done
	cat ${zimbra_conf_directory}/zmssl.cnf.in | \
    sed -e "s/@@HOSTNAME@@/${zimbra_server_hostname}/" \
		-e "s/@@ALTNAMES@@/$ALTNAMES/" > ${zimbra_ssl_directory}/zmssl.cnf
}

createSerial() {
  SER=`date "+%s"`
	echo "$SER" > ${zimbra_ssl_directory}/ca/ca.srl
}

importCA() {
	echo "** Importing CA"
	echo

	keytool -import -noprompt -keystore ${CACERTS} \
    -file ${zimbra_ssl_directory}/ca/ca.pem \
    -alias my_ca -storepass changeit
}

createKeyStore() {

	echo "** Creating keystore"
	echo

	rm -f ${mailboxd_keystore}

  # jetty may require a PKCS12 keystore
	keytool -validity 730 -genkey \
    -dname "CN=${zimbra_server_hostname}, OU=Zimbra, O=Zimbra, L=NA, S=NA, C=US" \
		-alias ${mailboxd_server}  -keyalg RSA -keysize 1024 \
    -keystore ${mailboxd_keystore} \
		-storetype JKS -storepass zimbra -keypass zimbra

}

createCertReq() {

	echo "** Creating server cert request"
	echo

	openssl req -new -nodes -out ${zimbra_ssl_directory}/server/server.csr \
		-keyout ${zimbra_ssl_directory}/server/server.key -newkey rsa:1024 \
		-config ${zimbra_ssl_directory}/zmssl.cnf -batch || exit 1

	keytool -certreq -keyalg RSA -alias ${mailboxd_server} \
    -file ${zimbra_ssl_directory}/server/mailboxd.csr \
    -keystore ${mailboxd_keystore} -storepass zimbra || exit 1

	cp ${zimbra_ssl_directory}/server/mailboxd.csr \
    ${zimbra_tmp_directory}/mailboxd.csr.$$
	cat ${zimbra_tmp_directory}/mailboxd.csr.$$ | \
    sed -e 's/NEW CERTIFICATE REQUEST/CERTIFICATE REQUEST/' \
		> ${zimbra_ssl_directory}/server/mailboxd.csr

}

signCertReq() {

	echo "** Signing cert request"
	echo

	openssl ca -out ${zimbra_ssl_directory}/server/server.crt -notext \
		-config ${zimbra_ssl_directory}/zmssl.cnf \
    -in ${zimbra_ssl_directory}/server/server.csr \
		-keyfile ${zimbra_ssl_directory}/ca/ca.key \
    -cert ${zimbra_ssl_directory}/ca/ca.pem -batch || exit 1

	openssl x509 -CA ${zimbra_ssl_directory}/ca/ca.pem \
    -CAkey ${zimbra_ssl_directory}/ca/ca.key \
		-CAserial ${zimbra_ssl_directory}/ca/ca.srl -req \
    -in ${zimbra_ssl_directory}/server/mailboxd.csr \
		-extensions v3_req -extfile ${zimbra_ssl_directory}/zmssl.cnf \
		-out ${zimbra_ssl_directory}/server/mailboxd.crt -days 365 || exit 1

	cp ${zimbra_ssl_directory}/server/server.crt \
    ${zimbra_conf_directory}/slapd.crt
	cp ${zimbra_ssl_directory}/server/server.key \
    ${zimbra_conf_directory}/slapd.key
	cp ${zimbra_ssl_directory}/server/server.crt \
    ${zimbra_conf_directory}/perdition.pem
	cp ${zimbra_ssl_directory}/server/server.key \
    ${zimbra_conf_directory}/perdition.key
	mkdir -p ${zimbra_conf_directory}/ca
	cp ${zimbra_ssl_directory}/ca/ca.key ${zimbra_conf_directory}/ca/ca.key
	cp ${zimbra_ssl_directory}/ca/ca.pem ${zimbra_conf_directory}/ca/ca.pem

}

createConf $@

createSerial

importCA

createKeyStore

createCertReq

signCertReq

chmod -R 700 ${zimbra_ssl_directory}
