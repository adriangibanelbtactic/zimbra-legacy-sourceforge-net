#!/usr/bin/perl
# 
# ***** BEGIN LICENSE BLOCK *****
# Version: MPL 1.1
# 
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 ("License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.zimbra.com/license
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Code is: Zimbra Collaboration Suite Server.
# 
# The Initial Developer of the Original Code is Zimbra, Inc.
# Portions created by Zimbra are Copyright (C) 2005 Zimbra, Inc.
# All Rights Reserved.
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 

use strict;

# List of authorized commands and their corresponding scripts
#

my %commands = (
	"start" => {
		"args" => {

			"mailbox"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmmailboxctl start" ],
			},
			"ldap"	=> {
				"script"	=> [ "/opt/zimbra/bin/ldap start" ],
			},
			"mta"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmmtactl start" ],
			},
			"antispam"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmantispamctl start" ],
			},
			"antivirus"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmantivirusctl start" ],
			},
			"snmp"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmswatchctl start" ],
			},
			"spell"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmspellctl start" ],
			},

		},
	},
	"stop" => {
		"args" => {

			"mailbox"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmmailboxctl stop" ],
			},
			"ldap"	=> {
				"script"	=> [ "/opt/zimbra/bin/ldap stop" ],
			},
			"mta"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmmtactl stop" ],
			},
			"antispam"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmantispamctl stop" ],
			},
			"antivirus"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmantivirusctl stop" ],
			},
			"snmp"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmswatchctl stop" ],
			},
			"spell"	=> {
				"script"	=> [ "/opt/zimbra/bin/zmspellctl stop" ],
			},

		},
	},
	"startup" => {
		"script"	=> [ "/opt/zimbra/bin/zmcontrol startup" ],
	},
	"shutdown" => {
		"script"	=> [ "/opt/zimbra/bin/zmcontrol shutdown" ],
	},
	"msgtrace" => {
		"script"	=> [ "/opt/zimbra/bin/zmmsgtrace" ],
	},
	"flushqueue" => {
		"script"	=> [ "/opt/zimbra/postfix/sbin/postqueue -f" ],
	},
	"showqueue" => {
		"script"	=> [ "/opt/zimbra/postfix/sbin/postqueue -p" ],
	},
	"slapcat" => {
		"script"	=> [ "/opt/zimbra/openldap/sbin/slapcat -m -f /opt/zimbra/conf/slapd.conf" ],
	},
);

my %allhosts = ();
my $gothosts = 0;

my $thishost = `/opt/zimbra/bin/zmlocalconfig -m nokey zimbra_server_hostname`;
chomp $thishost;

sub runRemoteCommand {
	my $host = shift;
	my $command = shift;
	my $args = shift;

	print "Remote: HOST:$host $command $args\n";
}

sub runCommand {
	my $host = shift;
	my $command = shift;
	my $args = shift;

	if ($host ne $thishost) {
		runRemoteCommand($host, $command, $args);
		return;
	}

	my $cl;

	if (defined ($commands{$command}{script})) {
		$cl = $commands{$command}{script};
	} else {
		my @a = split (' ', $args);
		my $arg = shift @a;
		$args = join(' ',@a);


		if (defined ($commands{$command}{args}{$arg}{script})) {
			$cl = $commands{$command}{args}{$arg}{script};
		} else {
			print "ERROR: Unknown command $_\n";
			return;
		}
	}

	foreach my $cm (@$cl) {
		# Only pass the args that we approve, for security
		#my $cmdstr = "$cm $args";
		my $cmdstr = "$cm";
		if (open COMMAND, "$cmdstr |") {
			print "STARTCMD: $host $cmdstr\n";
			while (<COMMAND>) {
				print $_;
			}
			close COMMAND;
			print "ENDCMD: $host $cmdstr\n";
		} else {
			print "Can't run $cmdstr: $!\n\n";
		}
	}
}

sub getHostsByService {
	my $service = shift;

	my @hosts = ();

	if (!$gothosts) {
		open CMD, "/opt/zimbra/bin/zmprov gas |" or return undef;
		my @hl = <CMD>;
		close CMD;
		chomp @hl;
		foreach my $h (@hl) {
			alarm(120);
			open CMD, "/opt/zimbra/bin/zmprov gs $h | grep zimbraServiceEnabled | sed -e 's/zimbraServiceEnabled: //'|" or return undef;
			my @sl = <CMD>;
			close CMD;
			chomp @sl;
			foreach my $s (@sl) {
				$allhosts{$h}{$s} = $s;
			}
			alarm(0);
		}
		$gothosts = 1;
	}

	foreach my $h (keys %allhosts) {
		foreach my $s (keys %{ $allhosts{$h} }) {
			if ($s eq $service) {
				push @hosts, $h;
			}
		}
	}
	return \@hosts;
}

sub getHostList {
	my $hstring = shift;

	# Host format is either 
	#   HOST:h1[,HOST:h2...] and/or
	#   SERVICE:s1[SERVICE:s2,...]
	# The script will de-dup hosts

	my %hosts = ();

	my @hspecs = split (',', $hstring);
	foreach my $spec (@hspecs) {
		my ($type, $item) = split (':', $spec);
		if ($type eq "HOST") {
			if ($item eq "ALL") {
				getHostsByService();
				my @h = sort keys %allhosts;
				return \@h;
			}
			$hosts{$item} = $item;
		} elsif ($type eq "SERVICE") {
			if ($item eq "ALL") {
				getHostsByService();
				my @h = sort keys %allhosts;
				return \@h;
			}
			my $hl = getHostsByService($item);
			foreach (@$hl) {
				$hosts{$_} = $_;
			}
		} else {
			return undef;
		}
	}
	my @h = sort keys %hosts;
	return \@h;
}

sub doHelp {
	foreach my $cm (sort keys %commands) {
		if (defined ($commands{$cm}{args})) {
			foreach my $arg (sort keys %{ $commands{$cm}{args}}) {
				print "$cm $arg";
				foreach my $sc (@{ $commands{$cm}{args}{$arg}{script} }) {
					print "\t$sc\n";
				}
			}
		} else {
			print "$cm";
			foreach my $sc (@{ $commands{$cm}{script} }) {
				print "\t$sc\n";
			}
		}
	}
}

sub handleALRM {
	print "ENDCMD: Timeout reached!\n";
	eval {
		close CMD;
	};
}

$| = 1;

$SIG{ALRM} = \&handleALRM;

while (<>) {
	chomp;
	my ($host, $command, $args) = split (' ', $_, 3);

	if ($host eq "?") {
		doHelp();
		next;
	}

	my $hostlist = getHostList ($host);

	if (!defined ($hostlist)) {
		print "ERROR: Invalid hostlist\n";
		last;
	}

	foreach my $h (@$hostlist) {
		runCommand ($h, $command, $args);
	}
	exit 0;

}
