------------------------------------------------------------
GOALS/CONCEPTS
------------------------------------------------------------
0) we have too many ways of getting at data (content, ical, rss, etc), we have:

  get an attachment: 

    http://{server}/service/content/get?id=544&part=2

  get the calendar as ical: 

    http://{server}/service/ical/cal.ics  

  get an RSS feed ("is:unread inbox" by default):

    http://{server}/service/rss/index.rss[?query=...]

  get the contacts (all contacts not in trash):

    http://{server}/service/csv/contacts.csv

  We'll also be adding calendar free/busy and public folders/documents.

  We should unify all these into a single access mechanism with consistent naming.

  When you toss in the ability to request that for another account as well things
  get ugly.

1) everything item should be addressable using a clean, REST URL format

2) Should have user-friendly URLs for humans consumption, as well 
   as low-level ID-driven URLs for use within programs (web client references to
   attachemnts, etc).

3) Should be able to request different "flavors" for content. i.e., XML, JSON,
   ICS, RSS/ATOM, RDF, HTML, CSV, microformats, etc. The flavor will be based 
   on the "fmt" query param. "flavor" is a term used in articles on REST, 
   and basically means MIME content-type. If an explicitp flavor is not requested,
   then the default for a given type will be used.

   folders in our system have a "hint" for which view to use to display the folder's
   contents. We should use that hint to determine the default flavor for a folder.

4) all items should minimally have an XML and JSON repsentation, ideally using 
   our existing formats, though we might want to re-examine them and/or have different
   views for those types.

5) we should design this with "publishing" and "public" folders/wiki in mind

------------------------------------------------------------
EXAMPLES
------------------------------------------------------------

There are two primary formats, one using a folder, and one using a mail item id.

http://server/zimbra/user/[~]{account-name}/{folder-path}    // path to a folder 
http://server/zimbra/user/[~]{account-name}/?id={item-id}       // a mail item id

A single ~ is allowed and references the authenticated user accessing the data. 

Some examples:

/zimbra/user/roland/inbox.rss         // RSS feed of inbox 
/zimbra/user/roland/inbox.xml         // Zimbra XML representation of inbox
/zimbra/user/roland/inbox.zip         // A ZIP file of all messages in the inbox folder

/zimbra/user/roland/contacts                     // CSV view of contacts folder
/zimbra/user/roland/contacts?fmt=json            // JSON view of contacts folder

/zimbra/user/roland/calendars                    // ICS view of calendar
/zimbra/user/janie/holidays                      // Janie's holidays calendar
/zimbra/user/roland/calendar/project.html        // html view of calendar/projects calendar
/zimbra/user/roland/calendar.atom                // atom feed of calendar

The second format is used to reference something by its mail item id:

/zimbra/user/roland/?id=10                    // ICS view of calendar, referenced via ID
/zimbra/user/roland/?id=945&fmt=vcard         // contact formatted as a vcard
/zimbra/user/roland/?id=100&part=2.3          // message with id 100, mime part 2.3

Can also use "/zimbra/userid" to represent a user's zimbraId, giving a truly persistent URL:

/zimbra/userid/85f92db0-3348-4916-9ca5-f74a9a5252e0/?id=34567

When we support documents in a folder, we'd use the document's name as you'd expect:

/zimbra/user/smith/work/partner/authentication.doc

We should of course be able to convert attachments to HTML (via Verity) with this
syntax:

/zimbra/user/roland/?id=564&part=4&fmt=html   // part 4 (which could be a word doc) in html

------------------------------------------------------------
SEARCHING
------------------------------------------------------------

Since search is a big part of Zimbra, all item URLs should generally allow a search
query to either gather all results, or constrain them. For example:

/zimbra/user/roland/inbox.rss

This would give back a simple RSS feed of all items in the inbox. To send back only
unread, you'd do:

/zimbra/user/roland/inbox.rss?query="is:unread"

or:

/zimbra/user/roland/?fmt=rss&query="in:inbox is:unread"

We probably want to allow the same params that the SearchRequest soap command allows,
to allow for paging, restricting what types of items are returned, etc:

 [limit="..."] 
 [offset="..."]
 [sortBy="{sort-by}"]
 [groupBy="{group-by}"] 
 [types="{types}"] 
 [cursorId="prevId"]

------------------------------------------------------------
ACCESSING DATA ACROSS Zimbra DOMAINs
------------------------------------------------------------

1. Intra-domain (authoratative domains within a Zimbra insall)

to access items across domains within a Zimra install, specify an @ in the mailbox
name:

/zimbra/user/schemers@zimbra.com/calendar
/zimbra/user/joer@zombo.com/calendar

Both zimbra.com and zombo.com are part of the same Zimbra install, and thus accounts
and mailbox locations on both can be resolved internally.

2. Inter-domain

To access items across domains that span Zimbra installations, use the
exact same naming convention.

For example, if companyA installs Zimbra, and companyB installs Zimbra, someone at
companyA should be able to reference an item from companyB using the same syntax:

/zimbra/user/john.smith@companyB.com/shared/contacts

this can be accomplished with DNS SRV records. For example, companyB.com could
publish a SRV record for _zimbra._tcp:

_zimbra._tcp.companyB.com. SRV   10  5   80      zimbra.companyB.com

The Zimbra proxy at companyA can then detect that companyB.com is not a local Zimbra
domain, and do a DNS lookup for:

_zimbra._tcp.companyB.com

And get back "zimbra.companyB.com" as the name of the Zimbra sever to
direct the request to. It would then do the equivalent of:

http://zimbra.companyB.com/zimbra/user/john.smith@companyB.com/shared/contacts

------------------------------------------------------------
ISSUES/NOTES
------------------------------------------------------------

1. how do you specify a folder and all sub folders recursively?

  For example, I can see wanting to specify:

  /zimbra/user/roland/sales?fmt=zip                 // the sales folder only
  /zimbra/user/roland/sales?fmt=zip?recursive=1     // sales folder and all recursive
  /zimbra/user/roland/sales/*?fmt=zip               // all folders in sales (not including sales)
  /zimbra/user/roland/sales/*?fmt=zip?recursive=1   //  same as previous, but recursive

2. user-friendly item "ids"? It would be nice to have user-friendly names 
   for items inside of a folder, such as (+ is url-encoded form of a space):

  /zimbra/user/roland/calendar/Staff+Meeting
  /zimbra/user/roland/contacts/Roland+Schemers
  /zimbra/user/roland/inbox/Important+Meeting

  Exchange allows this type of naming, need to determine how/if we'd want to do
  this, and how to deal with collisions like it does. 
  
  Might need to come up with a per-item query-param string, or use search:
  
  /zimbra/user/roland/contacts/?query="Roland Schemers"

3. there will probably by mail-item specific query params, like duration for 
   calendars, picking alternate views for .html flavors, etc. Should try and
   standardize where possible. For exmaple:

   /zimbra/user/roland/calendar?start=20051225&fmt=hmtl&view=week

4. calendar free/busy chould also be exported via this mechanism:

   /zimbra/user/schemers/?fmt=vfb

   specifying it on the "root" folder would get the free/busy for all calendars that
   are marked to be included in free/busy.

5. initially we might not support things like:

   /zimbra/user/roland/inbox?fmt=csv

   but ideally we'd emit a simple CSV format. We could define to be something like a
   separate column for each header, and specially named columns for the "body" 
   and/or mime parts of the message. The mime body parts would not be incuded, 
   just a URL referencing them.

6. We should have an extension mechanism to allow people to plug in the their own
   formats. The plugin would get a context containing the query params, the path 
   (resolve/unresovled parts), and the target mail item.

7. When using the extension-style format syntax:

   /zimbra/user/roland/inbox.rss
   
   vs:
   
   /zimbra/user/roland/inbox?fmt=rss

  If there is a folder/document that is actually named "inbox.rss", then it takes precedent
  over the "inbox" folder. So you'll have to explicitly use the fmt query parameter to 
  disambiguate between the two:

  /zimbra/user/roland/inbox?fmt=rss
   /zimbra/user/roland/inbox.rss?fmt=zip
   
------------------------------------------------------------
REFERENCES
------------------------------------------------------------
REST (Representational State Transfer)

  http://www.xfront.com/REST.html

Building Web Services the REST Way

  http://www.xfront.com/REST-Web-Services.html

Meerkat: An Open Service API

  http://www.oreillynet.com/pub/a/rss/2000/05/09/meerkat_api.html

REST and the Real World
 
  http://webservices.xml.com/pub/a/ws/2002/02/20/rest.html?page=1

Microformats

  http://microformats.org/

Hula URLs

  http://www.hula-project.org/Hula_URLs

------------------------------------------------------------
APPENDIX A: URL forms
------------------------------------------------------------
Here various ways to access john.doe@zimbra.com's calendar:

shortcut to yourself: 
  /zimbra/user/~/calendar
  /zimbra/user/~/?id=10       // id 10 is always the calendar folder

explicit account: 
   /zimbra/user/john.doe/calendar
   /zimbra/user/john.doe/?id=10
   /zimbra/user/john.doe@zimbra.com/calendar
   /zimbra/userid/34cc4086-801e-42a0-a67a-ea93c1590c4e/calendar
   /zimbra/user/34cc4086-801e-42a0-a67a-ea93c1590c4e/?id=10
