<project name="ZimbraWebClient" default="war">

  <property environment="env"/>
  
  <property name="build.dir"          location="build"/>
  
  <property name="dist.dir"           location="build/dist"/>
  <property name="dist.tomcat.dir"    location="${dist.dir}/tomcat"/>
  <property name="dist.tomcat.webapps.dir" location="${dist.tomcat.dir}/webapps"/>
  <property name="dist.tarfile"         value="dev-zimbra.tar"/>

  <property name="warfile"            location="${dist.tomcat.webapps.dir}/zimbra.war"/>
  <property name="adminwarfile"      location="${dist.tomcat.webapps.dir}/zimbraAdmin.war"/>		
  
  <property name="jars.dir"           location="jars"/>
  <property name="jars.archive.dir"   location="../ZimbraServer/jars"/>
  <property name="src.dir"            location="src"/>
  <property name="gzipExtension" value=".jgz"/>	
  <property name="jsminExtension" value=".jsmin"/>	
  <property name="licenseExtension" value=".license"/>	

  <condition property="ajax.dir" value="${env.AJAX_DIR}">
    <isset property="env.AJAX_DIR" />
  </condition>	
  <condition property="ajax.dir" value="../Ajax">
    <not><isset property="env.AJAX_DIR"/></not>
  </condition>	
  <condition property="plat.tag" value="">
    <not><isset property="plat.tag"/></not>
  </condition>	

  <property name="ajax.src.dir" value="${ajax.dir}/src"/>
  <property name="ajax.jars.dir" value="${ajax.dir}/jars"/>
  <property name="ajax.dwtimg.dir" value="${ajax.dir}/img"/>
  <property name='ajax.imagemerge.dir' location='${ajax.src.dir}/com/zimbra/ajax/imagemerge'/>
  <property name='ajax.i18n.dir' location='${ajax.src.dir}/com/zimbra/ajax/i18n'/>
  
  <condition property="deploy.dir" value="${env.DEPLOY_DIR}">
    <isset property="env.DEPLOY_DIR" />
  </condition>	

  <condition property="deploy.dir" value="/opt/zimbra/tomcat/webapps">
    <not><isset property="env.DEPLOY_DIR"/></not>
  </condition>	

  <condition property="deploy.url" value="${env.DEPLOY_URL}">
    <isset property="env.DEPLOY_URL" />
  </condition>	
  <condition property="deploy.url" value="http://localhost:7070/manager/">
    <not><isset property="env.DEPLOY_URL"/></not>
  </condition>
  
  <property name="deploy.war" value="${warfile}"/>
  <property name="deploy.user" value="zimbra"/>
  <property name="deploy.password" value="zimbra"/>
  <property name="deploy.path" value="/zimbra"/>
  <property name="deploy.admin.path" value="/zimbraAdmin"/>
  <property name="deploy.admin.war" value="${adminwarfile}"/>
  
  <property name="images.animated.destDir" value="${build.dir}/WebRoot/img/animated"/>
  <property name="images.hiRes.destDir" value="${build.dir}/WebRoot/img/hiRes"/>
  <property name="images.loRes.destDir" value="${build.dir}/WebRoot/img/loRes"/>
  <property name="images.cssFile" value="imgs.css"/>

  <condition property='isProduction' value='true'>
    <or>
      <not><isset property='env.ZIMBRA_BUILD'/></not>
      <not><equals arg1='${env.ZIMBRA_BUILD}' arg2='development'/></not>
    </or>
  </condition>
  <condition property='isProduction' value='false'>
    <equals arg1='${env.ZIMBRA_BUILD}' arg2='development'/>
  </condition>
  <condition property='isDevelopment' value='true'>
    <equals arg1='${isProduction}' arg2='false'/>
  </condition>
  <condition property='isDevelopment' value='false'>
    <equals arg1='${isProduction}' arg2='true'/>
  </condition>
  
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="jars/ant-contrib-1.0b1.jar"/>
    </classpath>
  </taskdef>
  
  <path id="class.path">
    <fileset dir="${jars.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${jars.archive.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${ajax.jars.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="class.path"/>
  
  <target name="build-init">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.tomcat.webapps.dir}"/>
    <mkdir dir="${build.dir}/WebRoot/js"/>
  </target>

  <target name="compile" depends="build-init" description="compile the filter source" >
    <!-- Compile the java code from ${src} into ${build} -->
    <mkdir dir='${build.dir}/classes'/>
    <javac srcdir="${src.dir}" destdir="${build.dir}/classes" source="1.4" target="1.4" debug="on">
      <classpath refid="class.path"/>
      <include name="**/*.java"/>
    </javac>
    <javac srcdir="${ajax.src.dir}" destdir="${build.dir}/classes" source="1.4" target="1.4" debug="on">
      <classpath refid="class.path"/>
      <include name="**/*.java"/>
    </javac>

    <!-- define imagemerge task -->
    <pathconvert property='imagemerge.cp' pathsep='${path.separator}'>
      <path>
        <pathelement location='${build.dir}/classes'/>
        <fileset dir='${jars.dir}' includes='**/*.jar'/>
      </path>
    </pathconvert>
    <taskdef name='imagemerge' 
      classname='com.zimbra.ajax.imagemerge.ImageMergeTask' 
      classpath='${imagemerge.cp}'
      />

    <!-- define sortimages task -->
    <pathconvert property='sortimages.cp' pathsep='${path.separator}'>
      <path>
        <pathelement location='${build.dir}/classes'/>
        <fileset dir='${jars.dir}' includes='**/*.jar'/>
      </path>
    </pathconvert>
    <taskdef name='imagesort' 
      classname='com.zimbra.ajax.imagesort.ImageSortTask' 
      classpath='${sortimages.cp}'
      />
  </target>

  <target name="clean" depends="build-init" description="Removes any temporary files">
    <delete dir="${build.dir}"/>
    <delete>
      <fileset dir="WebRoot" includes="js/**/*${jsminExtension}, js/**/*${gzipExtension}, js/*_all.js*"/>
    </delete>	
  </target>

	<target name='i18n' depends='i18n-init,compile' unless='i18n-done'>
		<taskdef name='i18n' 
				 classname='com.zimbra.ajax.i18n.GenerateDataTask' 
				 classpath='${build.dir}/classes'
		/>
		<mkdir dir='${build.dir}/i18n/msgs' />
		<i18n destdir='${build.dir}/i18n/msgs' />
	</target>
	<target name='i18n-init'>
		<dependset>
	      <srcfileset dir='${ajax.i18n.dir}' includes='**/*.java'/>
	      <targetfilelist dir='${build.dir}/i18n' files='msgs/I18nMsg.properties'/>
		</dependset>
		<available property='i18n-done' file='${build.dir}/i18n/msgs/I18nMsg.properties' />
	</target>
	
  <target name="jam-files" depends="compile">
    <taskdef name="jammer" classname="com.zimbra.webClient.build.JammerTask" classpath="${build.dir}/classes"/>
    <jammer webrootDir="${build.dir}/WebRoot/" pathToWebapp="/zimbra" destFile="${build.dir}/WebRoot/js/Ajax_all.js">
      <filelist dir="${build.dir}/WebRoot/public" files="Ajax.jsp,Zimbra.jsp"/>
    </jammer>
    <jammer webrootDir="${build.dir}/WebRoot/" pathToWebapp="/zimbra" destFile="${build.dir}/WebRoot/js/ZimbraMail_all.js">
      <filelist dir="${build.dir}/WebRoot/public" files="ZimbraMail.jsp"/>
    </jammer>
    <jammer webrootDir="${build.dir}/WebRoot/" pathToWebApp="/zimbra" destFile="${build.dir}/WebRoot/js/ZimbraAdmin_all.js">
      <filelist dir="${build.dir}/WebRoot/public" files="ZimbraAdmin.jsp"/>
    </jammer> 
  </target>

  <target name="gzip">
    <gzip src="${var}${jsminExtension}${licenseExtension}" zipfile="${var}${gzipExtension}"/>
  </target>

  <target name="rm-temp-file">
    <delete file="${var}${jsminExtension}" />
    <delete file="${var}${jsminExtension}${licenseExtension}" />
  </target>

  <target name="jsmin">
    <exec executable="bin/${plat.tag}/jsmin">
      <redirector input="${var}" output="${var}${jsminExtension}"/>
    </exec>
    <echo>Strip whitespace: ${var}</echo>
  </target>

  <target name="prepend-ZPL">
    <concat destfile="${var}${jsminExtension}${licenseExtension}">
      <header filtering="no" file="${build.dir}/preamble-zpl.txt"/>
      <path>
	<fileset file="${var}${jsminExtension}"/>
      </path>
    </concat>
    <echo>Prepend ZPL: ${var}</echo>
  </target>

  <target name="prepend-MPL">
    <concat destfile="${var}${jsminExtension}${licenseExtension}">
      <header filtering="no" file="${build.dir}/preamble-mpl.txt"/>
      <path>
	<fileset file="${var}${jsminExtension}"/>
      </path>
    </concat>
    <echo>Prepend MPL: ${var}</echo>
  </target>


  <target name="compress-js-files" depends="copy-files-to-build-area, copy-help, copy-admin-help, jam-files">
    <fileset id="js-includes" dir="${build.dir}/WebRoot" includes="js/*.js"/>
    <concat destfile="${build.dir}/preamble-mpl.txt">
      <header>/*</header>
      <footer>*/</footer>
      <path>
	<fileset file="../ZimbraLicenses/zimbra/preamble-MPL-Ajax.txt"/>
      </path>
    </concat>
    <concat destfile="${build.dir}/preamble-zpl.txt">
      <header>/*</header>
      <footer>*/</footer>
      <path>
	<fileset file="../ZimbraLicenses/zimbra/preamble-ZPL-WebClient.txt"/>
      </path>
    </concat>
    <copy todir="${build.dir}/WebRoot">
      <fileset refid="js-includes"/>
    </copy>
    <foreach target="jsmin" param="var">
      <path>
	<fileset refid="js-includes"/>
      </path>
    </foreach>
    <foreach target="prepend-ZPL" param="var">
      <path>
	<fileset dir="${build.dir}/WebRoot/js/zimbraAdmin/config/msgs" includes="*.js" />
	<fileset dir="${build.dir}/WebRoot/js/zimbraMail/config/msgs" includes="*.js" />
	<fileset dir="${build.dir}/WebRoot/js/zimbraMail" includes="*.js" />
	<fileset dir="${build.dir}/WebRoot/js/zimbraAdmin" includes="*.js" />
	<fileset dir="${build.dir}/WebRoot/js">
	  <include name="ZimbraAdmin_all.js"/>
	  <include name="ZimbraMail_all.js"/>
	  <include name="ZmLogin.js"/>
	</fileset>
      </path>
    </foreach>
    <foreach target="prepend-MPL" param="var">
      <path>
	<fileset dir="${build.dir}/WebRoot/js/ajax/config/msgs" includes="*.js"/>
	<fileset dir="${build.dir}/WebRoot/js">
	  <include name="Ajax_all.js"/>
	</fileset>
      </path>
    </foreach>
    <foreach target="gzip" param="var">
      <path>
	<fileset refid="js-includes"/>
      </path>
    </foreach>
    <foreach target="rm-temp-file" param="var">
      <path>
	<fileset refid="js-includes"/>
      </path>
    </foreach>	
  </target>
  
  <target name='images'>
    <antcall target='build-images'>
      <param name="csspathprefix" value="/zimbra/img/"/>
    </antcall>
    
  </target>
  
  <target name='admin-images'>
    <antcall target='build-images'>
      <param name="csspathprefix" value="/zimbraAdmin/img/"/>
    </antcall>
  </target>
  

  <target name='build-images' depends='images-are-dirty,compile' unless='imagesdone'>
    <!-- copy animated images 
    Since the imagemerge program does not support animated GIFs we have to use the
    copy ant task and manually create the CSS rules -->
    <echo/>
    <echo message='Copying animated images'/>
    <echo/>
    <copy todir="${images.animated.destDir}">
      <fileset dir="${ajax.dwtimg.dir}/animated"  includes="*"/>
    </copy>

    <!-- copy hiRes images -->
    <mkdir dir="${images.hiRes.destDir}"/>
    <delete file='${images.hiRes.destDir}/${images.cssFile}'/>
    <echo/>
    <echo message='Copying high resolution images'/>
    <echo/>
    <imagemerge destdir='${images.hiRes.destDir}' copy='true'
      cssfile='${images.cssFile}' csspath='${csspathprefix}hiRes/'>
      <dirset dir='img/hiRes' includes='*'/>
      <dirset dir='${ajax.dwtimg.dir}/hiRes' 
	includes='*'/>
    </imagemerge>
    <echo/>

    <!-- merge loRes images -->
    <mkdir dir="${images.loRes.destDir}"/>
    <delete file='${images.loRes.destDir}/${images.cssFile}'/>
    <echo/>

    <echo message='Merging low resolution dwt images'/>
    <echo/>
    <imagemerge destdir='${images.loRes.destDir}' 
      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
      <dirset dir='${ajax.dwtimg.dir}/loRes' includes='*' excludes='**/examples,**/shadow_border'/>
    </imagemerge>

    <echo message='Copying non-mergeable low resolution dwt images'/>
    <echo/>
    <imagemerge destdir='${images.loRes.destDir}' copy='true'
      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
      <dirset dir='${ajax.dwtimg.dir}/loRes' includes='**/examples,**/shadow_border'/>
    </imagemerge>


    <echo message='Merging low resolution app images (-logo, -translate)'/>
    <echo/>
    <imagemerge destdir='${images.loRes.destDir}' 
      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
      <dirset dir='img/loRes' 
	includes='*'  excludes="**/logo,**/translate"/>
    </imagemerge>

    <echo/>
    <echo message='Copying non-mergeable low resolution app images (logo, translate)'/>
    <echo/>
    <imagemerge destdir='${images.loRes.destDir}' copy='true'
      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
      <dirset dir='img/loRes' includes='**/logo,**/translate'/>
    </imagemerge>
    <echo/>
    
    <antcall target="skin-images">
    </antcall>

  </target>


  <target name='skin-images'>
    <!-- put in a separate antcall for each skin directory here -->
    <antcall target='build-skin-images'>
      <param name="skindir" value="steel"/>
    </antcall>
  </target>

  <target name='build-skin-images' depends='compile' unless='imagesdone'>
    <!-- copy hiRes skin images -->
    <mkdir dir="${images.hiRes.destDir}/skins/${skindir}"/>
    <delete file='${images.hiRes.destDir}/skins/${skindir}/skin.css'/>
    <echo/>
    <echo message='Copying hiRes images for skin ${skindir}'/>
    <echo/>
    <imagemerge destdir='${images.hiRes.destDir}/skins/${skindir}' copy='true'
      cssfile='skin.css' csspath='${csspathprefix}hiRes/skins/${skindir}/'>
      <dirset dir='WebRoot/skins/${skindir}' includes='**/img'/>
    </imagemerge>
    <echo/>


    <!-- merge loRes skin images -->
    <mkdir dir="${images.loRes.destDir}/skins/${skindir}"/>
    <delete file='${images.loRes.destDir}/skins/${skindir}/skin.css'/>
    <echo/>
    <echo message='Merging loRes images for skin ${skindir}'/>
    <echo/>
    <imagemerge destdir='${images.loRes.destDir}/skins/${skindir}'
      cssfile='skin.css' csspath='${csspathprefix}loRes/skins/${skindir}/'>
      <dirset dir='WebRoot/skins/${skindir}' includes='**/img'/>
    </imagemerge>
    <echo/>
  </target>
  

  <target name='images-are-dirty' description='checks to see if images need to be processed' unless='images.force'>
    <dependset>
      <srcfileset dir='img' includes='**/*'/>
      <srcfileset dir='${ajax.dwtimg.dir}' includes='**/*'/>
      <srcfileset dir='${ajax.imagemerge.dir}' includes='**/*.java'/>
      <targetfilelist dir='${images.loRes.destDir}' files='${images.cssFile}'/>
    </dependset>
    <available property='imagesdone' file='${images.loRes.destDir}/${images.cssFile}'/>
  </target>
  

  <target name='sortimages' depends='sortimagesinit'>
    <!-- check properties -->
    <fail unless='sort.source' message='Must specify source directory. For example: ant -Dsort.source=src ...'/>    
    <fail unless='sort.target' message='Must specify target directory. For example: ant -Dsort.target=dest ...'/>    
    
    <!-- process directories -->
    <imagesort source='${sort.source}' target='${sort.target}' delete='true'/><!-- noop='true'/-->
  </target>
  
  <target name='sorticons' depends='sortimagesinit'>
    <!-- usage:  make a "images" directory in your ZimbraWebClient directory and do:
    ant sorticons
    -->
    <echo message='Sorting ZimbraWebClient/img/hiRes'/><echo/>
    <imagesort source='images' target='img/hiRes' delete='false'/>
    <echo message='Sorting ZimbraWebClient/img/loRes'/><echo/>
    <imagesort source='images' target='img/loRes' delete='true'/>

    <echo message='Sorting Ajax/dwt/hiRes'/><echo/>
    <imagesort source='images' target='${ajax.dwtimg.dir}/hiRes' delete='false'/>
    <echo message='Sorting Ajax/dwt/loRes'/><echo/>
    <imagesort source='images' target='${ajax.dwtimg.dir}/loRes' delete='true'/>

  </target>

  <target name='sortskin' depends='sortimagesinit'>
    <!-- usage:  make a "images" directory in your ZimbraWebClient directory and do:
    ant sortskin
    -->
    <echo message='Sorting skins/steel'/><echo/>
    <imagesort source='images' target='WebRoot/skins/steel/img' delete='true'/>
  </target>


  <target name='sortimagesinit' depends='compile'>
  </target>
  
  <target name="check4zimbraajax">
    <available property="ajax.present" file="${ajax.dir}" type="dir"/>
    <fail message="This project depends on Ajax being checked out at: ${ajax.dir}" unless="ajax.present"/>
  </target>
  
  <target name="copy-files-to-build-area" depends="check4zimbraajax">
    <copy file="WebRoot/WEB-INF/web.xml" tofile="${build.dir}/WebRoot/WEB-INF/web.xml" overwrite="${isProduction}"/>
    <copy file="WebRoot/js/zimbraMail/share/view/ZmLogin.js" tofile="${build.dir}/WebRoot/js/ZmLogin.js" overwrite="${isProduction}"/>
    <copy todir="${build.dir}/WebRoot/public/" overwrite="${isProduction}" >
      <fileset dir="WebRoot/public" includes="**/*"/>
    </copy>
    <copy todir="${build.dir}/WebRoot/zimlets/" overwrite="${isProduction}" >
      <fileset dir="WebRoot/zimlets" includes="**/*"/>
    </copy>
    <copy todir="${build.dir}/WebRoot" overwrite="${isProduction}" >
      <fileset dir="WebRoot/" excludes="**/help/**,**/adminhelp/**"/>
    </copy>
    <copy todir="${build.dir}/WebRoot/js/ajax" overwrite="${isProduction}" >
      <fileset dir="${ajax.dir}/WebRoot/js"/>
    </copy>
  </target>
  
  <target name="copy-imgs-to-tmp-area" depends="check4zimbraajax">
    <copy todir="${tmp.dir}" overwrite="true">
      <fileset dir="img/loRes"/>
      <fileset dir="img/hiRes"/>
    </copy>
  </target>
  
  <target name="helpinit" unless='help.force'>
    <available property='helpdone' file='${build.dir}/WebRoot/help/WebHelp/'/>
  </target>

  <target name="copy-help" depends="helpinit" unless='helpdone'>	
    <unzip src="WebRoot/help/WebHelp.zip" dest="${build.dir}/WebRoot/tmp/help" overwrite="yes">
      <patternset>
	<include name="WebHelp/**/*"/>
      </patternset>
    </unzip>
    <copy todir="${build.dir}/WebRoot/help/" overwrite="true" >
      <fileset dir="${build.dir}/WebRoot/tmp/help/WebHelp/" includes="**/*"/>
    </copy>
    <delete dir="${build.dir}/WebRoot/tmp/help"/>
  </target>	

  <target name="adminhelpinit" unless='adminhelp.force'>
    <available property='adminhelpdone' file='${build.dir}/WebRoot/adminhelp/html/WebHelp/'/>
  </target>

  <target name="copy-admin-help" depends="adminhelpinit" unless='adminhelpdone'>	
    <mkdir dir="${build.dir}/WebRoot/tmp/adminhelp/html/WebHelp"/>
    <unzip src="WebRoot/adminhelp/html/ZimbraAdminOLH.zip" dest="${build.dir}/WebRoot/tmp/adminhelp/html/WebHelp" overwrite="yes">
      <patternset>
	<include name="OpenSourceAdminHelp/**/*"/>
      </patternset>
    </unzip>
    <copy todir="${build.dir}/WebRoot/adminhelp/html/" overwrite="true" >
      <fileset dir="${build.dir}/WebRoot/tmp/adminhelp/html/WebHelp/" includes="**/*"/>
    </copy>
    <copy todir="${build.dir}/WebRoot/adminhelp/pdf/" overwrite="true" >
      <fileset dir="WebRoot/adminhelp/pdf/" includes="*"/>
    </copy>  	
    <delete dir="${build.dir}/WebRoot/tmp/adminhelp/html"/>
  </target>	

  <target name="set-buildinfo-vars">
	<tstamp />
    <condition property="zimbra.buildinfo.version" value="0.0">
      <not>
        <isset property="${zimbra.buildinfo.version}" />
      </not>
    </condition>
    <condition property="zimbra.buildinfo.release" value="${user.name}">
      <not>
        <isset property="${zimbra.buildinfo.release}" />
      </not>
    </condition>
    <condition property="zimbra.buildinfo.date" value="${DSTAMP}-${TSTAMP}">
      <not>
        <isset property="${zimbra.buildinfo.date}" />
      </not>
    </condition>
    <condition property="zimbra.buildinfo.host" value="${zimbra.server.hostname}">
      <not>
        <isset property="${zimbra.buildinfo.host}" />
      </not>
    </condition>
  </target>
	
  <target name="generate-build-info">
    <propertyfile file="${build.dir}/build.properties" >
      <entry  key="build.number" type="int" default="1" operation="+" pattern="00000"/>
      <entry  key="build.date" type="date" value="now" pattern="yyyy-MM-dd HH:mm:ss" />
      <entry  key="build.simpleDate" type="date" value="now" pattern="yyMMddHHmmss"/>
      <entry  key="date.format" value="yyyyMMddHHmmss" />
    </propertyfile>	
  </target>

  <target name="inject-build-info" depends="set-buildinfo-vars,generate-build-info">
	<replace file="${build.dir}/WebRoot/js/zimbraMail/share/model/ZmSetting.js" token="@buildVersion@" value="${zimbra.buildinfo.version}" />
	<replace file="${build.dir}/WebRoot/js/zimbraMail/share/model/ZmSetting.js" token="@buildRelease@" value="${zimbra.buildinfo.release}" />
	<replace file="${build.dir}/WebRoot/js/zimbraMail/share/model/ZmSetting.js" token="@buildDateTime@" value="${DSTAMP}-${TSTAMP}" />
  </target>

  <!-- 
  This target is meant only to be run after a full deploy has
  been done once. It does not deal with the java code used by the
  ZimbraWebClient webapp, so if there are any java changes, another
  deploy will have to be run.
  -->
  <target name="dev-sync">
    <copy verbose="true" file="WebRoot/js/zimbraMail/share/view/ZmLogin.js" tofile="${deploy.dir}${deploy.path}/js/ZmLogin.js"/>
    <copy verbose="true" todir="${deploy.dir}${deploy.path}">
      <fileset dir="WebRoot" includes="js/**,test/**,public/**,skins/**" excludes="js/zimbraMail/share/view/ZmLogin.js"/>
      <fileset dir='${build.dir}/WebRoot' includes='img/**'/>
    </copy>
    <copy verbose="true" todir="${deploy.dir}${deploy.path}/js/ajax">
      <fileset dir="${ajax.dir}/WebRoot/js" includes="**/*.js" excludes="**/img/"/>
    </copy>
    <copy verbose='true' todir='${deploy.dir}${deploy.path}/WEB-INF/classes'>
      <fileset dir='${build.dir}/i18n' includes='msgs/*.properties'/>
      <fileset dir='${ajax.dir}/WebRoot/js/config' includes='msgs/*.properties'/>
      <fileset dir='WebRoot/js/zimbra/config' includes='msgs/*.properties'/>
      <fileset dir='WebRoot/js/zimbraMail/config' includes='msgs/*.properties'/>
    </copy>
    <dependset>
      <srcfileset dir='${build.dir}/i18n' includes='msgs/*.properties'/>
      <srcfileset dir='${ajax.dir}/WebRoot/js/config' includes='msgs/*.properties'/>
      <srcfileset dir='WebRoot/js/zimbra/config' includes='msgs/*.properties'/>
	  <srcfileset dir='WebRoot/js/zimbraMail/config' includes='msgs/*.properties'/>
      <targetfilelist dir='${deploy.dir}${deploy.path}/WEB-INF' files='web.xml'/>
    </dependset>
    <copy todir="${deploy.dir}${deploy.path}/WEB-INF">  	
      <fileset dir="${build.dir}/WebRoot/WEB-INF" includes="web.xml"/>
      <fileset dir="WebRoot/WEB-INF" includes="tlds/*"/>		
    </copy>
    <replace file="${deploy.dir}${deploy.path}/WEB-INF/web.xml" token="@prodMode@" value="false" />
    <replace file="${deploy.dir}${deploy.path}/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}" />
  </target>

  <target name="war" depends="copy-files-to-build-area, jam-files, inject-build-info, images, i18n">
    <property file="${build.dir}/build.properties" />
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@prodMode@" value="false" />
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}" />
    <war warfile="${warfile}" webxml="${build.dir}/WebRoot/WEB-INF/web.xml">
      <lib dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar"/>
      <classes dir="${build.dir}/classes" includes="**/*.class" excludes="**/imagemerge/*,**/build/*"/>
  	  <classes dir="${build.dir}/i18n" includes="msgs/*.properties" />
      <classes dir='${build.dir}/WebRoot/js/ajax/config' includes='msgs/*.properties'/>
      <classes dir="${build.dir}/WebRoot/js/zimbra/config" includes="msgs/*.properties"/>
      <classes dir="${build.dir}/WebRoot/js/zimbraMail/config" includes="msgs/*.properties"/>
      <webinf dir="WebRoot/WEB-INF" includes="tlds/*"/>
      <fileset dir="${build.dir}/WebRoot" includes="img/**,js/**,test/**,skins/**" excludes="js/zimbraAdmin/**,js/AjxAdmin_all.js,**/config/msgs/**"/>
      <fileset dir="${build.dir}/WebRoot" includes="zimlets/**,public/**,skins/**,**/*${gzipExtension}, **/*_all.*" excludes="public/admin.jsp,public/ZimbraAdmin.jsp,js/AjxAdmin_all.js,**/config/msgs/**"/>
    </war>
  </target>

	<target name="prod-war" depends="copy-files-to-build-area, inject-build-info, compress-js-files, images, i18n">
    <property file="${build.dir}/build.properties" />
    <copy file="WebRoot/WEB-INF/web.xml.production" tofile="${build.dir}/WebRoot/WEB-INF/web.xml" overwrite="true"/>
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@prodMode@" value="true" />
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}" />
    <war warfile="${warfile}" webxml="${build.dir}/WebRoot/WEB-INF/web.xml">
      <lib dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar"/>
  	  <classes dir="${build.dir}/i18n" includes="msgs/*.properties" />
      <classes dir='${build.dir}/WebRoot/js/ajax/config' includes='msgs/*.properties'/>
      <classes dir="${build.dir}/WebRoot/js/zimbra/config" includes="msgs/*.properties"/>
      <classes dir="${build.dir}/WebRoot/js/zimbraMail/config" includes="msgs/*.properties"/>
      <classes dir="${build.dir}/classes" includes="**/*.class"/>
      <webinf dir="WebRoot/WEB-INF" includes="tlds/*"/>
      <fileset dir="${build.dir}/WebRoot" includes="help/**"/>
      <fileset dir="${build.dir}/WebRoot" includes="img/**,js/**,skins/**" excludes='**/config/msgs/**'/>
      <fileset dir="${build.dir}/WebRoot" includes="js/ZmLogin.js,zimlets/**,public/**,**/*${gzipExtension}, **/*_all.*" excludes="public/admin.jsp,public/ZimbraAdmin.jsp,**/config/msgs/**"/>
    </war>
  </target>
  
  <target name="deploy" depends="war">
    <deploy url="${deploy.url}" username="${deploy.user}" password="${deploy.password}"
      path="${deploy.path}" war="${deploy.war}" update="true"/>
  </target>
  
  <target name="prod-deploy" depends="prod-war">
    <deploy url="${deploy.url}" username="${deploy.user}" password="${deploy.password}"
      path="${deploy.path}" war="${deploy.war}" update="true"/>
  </target>
  
  <target name="console-deploy" depends="deploy">
    <echo message="Please use 'deploy' instead of 'console-deploy' and goto '/zimbra' instead of '/ZimbraConsole'"/>
  </target>	
  
  <target name="dev-dist" description="build tar file of dev build to unpack over RPM install" depends="war">
    <delete>
      <fileset dir="${dist.dir}" includes="${dist.tarfile}"/>
    </delete>
    <tar destfile="${dist.dir}/${dist.tarfile}">
      <tarfileset dir="${dist.dir}"
	includes="**"
	mode="640" username="zimbra" group="zimbra"/>
    </tar>
  </target>
  
  <!-- admin console targets -->
  <target name="admin-dev-sync">
    <copy verbose="true" todir="${deploy.dir}${deploy.admin.path}">
      <fileset dir="WebRoot" includes="js/**,test/**,public/**,skins/**" excludes="js/zimbraMail/**,public/Login.jsp,public/launchZimbraMail.jsp,public/ZimbraMail.jsp,public/ZimbraMailNewCompose.jsp,public/Messages.jsp"/>
      <fileset dir='${build.dir}/WebRoot' includes='img/**'/>
    </copy>
    <copy verbose="true" todir="${deploy.dir}${deploy.admin.path}/js/ajax">
      <fileset dir="${ajax.dir}/WebRoot/js" includes="**/*.js" excludes="**/img/"/>
    </copy>
    <copy verbose="true" todir="${deploy.dir}${deploy.admin.path}/js/zimbraAdmin/config/style">
      <fileset dir="WebRoot/js/zimbraMail/config/style" includes="*.css" excludes="zm.css"/>
    </copy>
    <copy verbose='true' todir='${deploy.dir}${deploy.admin.path}/WEB-INF/classes'>
      <fileset dir='${build.dir}/i18n' includes='msgs/*.properties'/>
      <fileset dir='${ajax.dir}/WebRoot/js/config' includes='msgs/*.properties'/>
      <fileset dir='WebRoot/js/zimbra/config' includes='msgs/*.properties'/>
      <fileset dir='WebRoot/js/zimbraAdmin/config' includes='msgs/*.properties'/>
    </copy>
    <dependset>
      <srcfileset dir='${build.dir}/i18n' includes='msgs/*.properties'/>
      <srcfileset dir='${ajax.dir}/WebRoot/js/config' includes='msgs/*.properties'/>
      <srcfileset dir='WebRoot/js/zimbra/config' includes='msgs/*.properties'/>
      <srcfileset dir='WebRoot/js/zimbraAdmin/config' includes='msgs/*.properties'/>
      <targetfilelist dir='${deploy.dir}${deploy.admin.path}/WEB-INF' files='web.xml'/>
    </dependset>
    <copy todir="${deploy.dir}${deploy.admin.path}/WEB-INF">  	
      <fileset dir="${build.dir}/WebRoot/WEB-INF" includes="web.xml"/>
      <fileset dir="WebRoot/WEB-INF" includes="tlds/*"/>		
    </copy>
    <replace file="${deploy.dir}${deploy.admin.path}/WEB-INF/web.xml" token="@prodMode@" value="false" />
    <replace file="${deploy.dir}${deploy.admin.path}/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}" />
  </target>

  <!-- this is the production war file target for the admin webapp -->
  <target name="admin-war" depends="compress-js-files,generate-build-info, admin-images, copy-common-css-to-admin, i18n">
    <property file="${build.dir}/build.properties" />
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@prodMode@" value="true" />
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}" />
    <war destfile="${adminwarfile}" webxml="${build.dir}/WebRoot/WEB-INF/web.xml">
      <lib dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar"/>
  	  <classes dir="${build.dir}/i18n" includes="msgs/*.properties" />
      <classes dir='${build.dir}/WebRoot/js/ajax/config' includes='msgs/*.properties'/>
      <classes dir="${build.dir}/WebRoot/js/zimbra/config" includes="msgs/*.properties"/>
      <classes dir="${build.dir}/WebRoot/js/zimbraAdmin/config" includes="msgs/*.properties"/>
      <classes dir="${build.dir}/classes" includes="**/*.class" excludes="**/imagemerge/*,**/build/*"/>
      <webinf dir="WebRoot/WEB-INF" includes="tlds/*"/>
      <fileset dir="${build.dir}/WebRoot" includes="img/**,js/**,skins/**" excludes="js/ZimbraMail_all.js,js/ZmLogin.js,js/zimbraMail/**,**/config/msgs/**"/>
      <fileset dir="${build.dir}/WebRoot" includes="public/admin.jsp,public/Ajax.jsp,public/Zimbra.jsp,public/ZimbraAdmin.jsp,public/frameOpenerHelper.jsp,skins/**,**/*${gzipExtension}"/>
      <fileset dir="${build.dir}/WebRoot" includes="adminhelp/html/**"/>		
      <fileset dir="${build.dir}/WebRoot" includes="adminhelp/pdf/*.pdf"/>		
    </war>
  </target>

  <target name="admin-dev-war" depends="copy-files-to-build-area, jam-files, generate-build-info, admin-images, copy-common-css-to-admin, i18n">
    <property file="${build.dir}/build.properties" />
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@prodMode@" value="false" />
    <replace file="${build.dir}/WebRoot/WEB-INF/web.xml" token="@jsVersion@" value="${build.simpleDate}" />
    <war destfile="${adminwarfile}" webxml="${build.dir}/WebRoot/WEB-INF/web.xml">
      <lib dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar"/>
   	  <classes dir="${build.dir}/i18n" includes="msgs/*.properties" />
      <classes dir='${build.dir}/WebRoot/js/ajax/config' includes='msgs/*.properties'/>
      <classes dir="${build.dir}/WebRoot/js/zimbra/config" includes="msgs/*.properties"/>
      <classes dir="${build.dir}/WebRoot/js/zimbraAdmin/config" includes="msgs/*.properties"/>
      <classes dir="${build.dir}/classes" includes="**/*.class" excludes="**/imagemerge/*,**/build/*"/>
      <webinf dir="WebRoot/WEB-INF" includes="tlds/*"/>
      <fileset dir="${build.dir}/WebRoot" includes="img/**,js/**,skins/**" excludes="js/ZimbraMail_all.js,js/ZmLogin.js,js/zimbraMail/**,**/config/msgs/**"/>
      <fileset dir="${build.dir}/WebRoot" includes="public/admin.jsp,public/Ajax.jsp,public/Zimbra.jsp,public/ZimbraAdmin.jsp,public/frameOpenerHelper.jsp,skins/**,**/*${gzipExtension}"/>
      <fileset dir="${build.dir}/WebRoot" includes="adminhelp/html/**"/>		
      <fileset dir="${build.dir}/WebRoot" includes="adminhelp/pdf/*.pdf"/>		
    </war>
  </target>
  
  <target name="copy-common-css-to-admin">
    <echo message="Copying common css files to ${build.dir}${deploy.admin.path}/WebRoot/js/zimbraAdmin/config/style"/>
    <copy todir="${build.dir}/WebRoot/js/zimbraAdmin/config/style">  	
      <fileset dir="${build.dir}/WebRoot/js/zimbraMail/config/style" includes="*.css" excludes="zm.css"/>
    </copy>
  </target>
  
  <target name="admin-deploy" depends="admin-dev-war">
    <deploy url="${deploy.url}" username="${deploy.user}" password="${deploy.password}"
      path="${deploy.admin.path}" war="${deploy.admin.war}" update="true"/>
  </target>  
</project>
