<project name="Ajax" default="war">

	<property environment="env"/>
	
	<property name="build.dir"          location="build"/>
	<property name="build.examples.dir" location="${build.dir}/WebRoot/examples"/>
	<property name="build.cmn.dir"      location="${build.examples.dir}/common"/>
	<property name="build.img"          location="${build.dir}/WebRoot/img"/>
	<property name="dist.dir"           location="build/dist"/>
	<property name="dist.tomcat.dir"    location="${dist.dir}/tomcat"/>
	<property name="dist.tomcat.webapps.dir" location="${dist.tomcat.dir}/webapps"/>
	<property name="dist.tarfile"       value="dev-zimbra.tar"/>

	<property name="warfile"            location="${dist.tomcat.webapps.dir}/ajax.war"/>
	
	<property name="jars.dir"           location="jars"/>
	<property name="src.dir"            location="src"/>
	<property name="images.dir"			location="img"/>

	<condition property="deploy.dir" value="${env.DEPLOY_DIR}">
		<isset property="env.DEPLOY_DIR" />
	</condition>	
	<condition property="deploy.dir" value="/opt/zimbra/tomcat/webapps">
		<not><isset property="env.DEPLOY_DIR"/></not>
	</condition>	
	
	<property name="deploy.war" value="${warfile}"/>
	<property name="deploy.url" value="http://localhost:7070/manager/"/>
	<property name="deploy.user" value="zimbra"/>
	<property name="deploy.password" value="zimbra"/>
	<property name="deploy.path" value="/ajax"/>

	<property name="images.hiRes.destDir" value="${build.cmn.dir}/img/hiRes"/>
	<property name="images.loRes.destDir" value="${build.cmn.dir}/img/loRes"/>
	<property name="images.animated.destDir" value="${build.cmn.dir}/img/animated"/>
	<property name="images.cssFile" value="dwtimgs.css"/>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="jars/ant-contrib-1.0b1.jar"/>
		</classpath>
	</taskdef>
  
	<path id="class.path">
		<fileset dir="${jars.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="compile" depends="build-init" description="compile the filter source" >
		   <!-- Compile the java code from ${src} into ${build} -->
		    <mkdir dir='${build.dir}/classes'/>
		    <javac srcdir="${src.dir}" destdir="${build.dir}/classes" source="1.4" target="1.4" debug="on">
		      <classpath refid="class.path"/>
		      <include name="**/*.java"/>
		    </javac>

		    <!-- define imagemerge task -->
		    <pathconvert property='imagemerge.cp' pathsep='${path.separator}'>
		      <path>
		        <pathelement location='${build.dir}/classes'/>
		        <fileset dir='${jars.dir}' includes='**/*.jar'/>
		      </path>
		    </pathconvert>
		    <taskdef name='imagemerge' 
		      classname='com.zimbra.ajax.imagemerge.ImageMergeTask' 
		      classpath='${imagemerge.cp}'
		      />

	</target>

	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="class.path"/>
  
	<target name="build-init">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.tomcat.webapps.dir}"/>
		<mkdir dir="${build.dir}/WebRoot/js"/>
	</target>

	<target name="clean" depends="build-init" description="Removes any temporary files">
		<delete dir="${build.dir}"/>
	</target>

	<target name='i18n' depends='i18n-init,compile' unless='i18n-done'>
		<taskdef name='i18n' 
				 classname='com.zimbra.ajax.i18n.GenerateDataTask' 
				 classpath='${build.dir}/classes'
		/>
		<mkdir dir='${build.dir}/i18n/msgs' />
		<i18n destdir='${build.dir}/i18n/msgs' />
	</target>
	<target name='i18n-init'>
		<available property='i18n-done' file='${build.dir}/i18n/msgs/I18nMsg.properties' />
	</target>
	
	<target name="copy-files-to-build-area">
		<copy file="WebRoot/WEB-INF/web.xml" tofile="${build.dir}/WebRoot/WEB-INF/web.xml" overwrite="true"/>
		<copy todir="${build.dir}/WebRoot/examples/" overwrite="true" >
			<fileset dir="WebRoot/examples" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		<copy todir="${build.dir}/WebRoot/" overwrite="true" >
			<fileset dir="WebRoot/" includes="js/**/*_en.js"/>
		</copy>
	</target>


	<target name='images'>
		<antcall target='build-images'>
			<param name="csspathprefix" value="/ajax/examples/common/img/"/>
		</antcall>    
	</target>		
	
	<target name='images-are-dirty' description='checks to see if images need to be processed' unless='images.force'>
		<dependset>
			<srcfileset dir='img' includes='**/*'/>
			<targetfilelist dir='${images.loRes.destDir}' files='${images.cssFile}'/>
		</dependset>
	    <available property='imagesdone' file='${images.loRes.destDir}/${images.cssFile}'/>
	</target>
	
	 <target name='build-images' depends='images-are-dirty,compile' unless='imagesdone'>
	    <!-- copy animated images 
	    Since the imagemerge program does not support animated GIFs we have to use the
	    copy ant task and manually create the CSS rules -->
	    <echo/>
	    <echo message='Copying animated images'/>
	    <echo/>
	    <copy todir="${images.animated.destDir}">
	      <fileset dir="img/animated"  includes="*"/>
	    </copy>

	    <!-- copy hiRes images -->
	    <mkdir dir="${images.hiRes.destDir}"/>
	    <delete file='${images.hiRes.destDir}/${images.cssFile}'/>
	    <echo/>
	    <echo message='Copying high resolution images'/>
	    <echo/>
	    <imagemerge destdir='${images.hiRes.destDir}' copy='true'
	      cssfile='${images.cssFile}' csspath='${csspathprefix}hiRes/'>
	      <dirset dir='img/hiRes' includes='*'/>
	    </imagemerge>
	    <echo/>

	    <!-- merge loRes images -->
	    <mkdir dir="${images.loRes.destDir}"/>
	    <delete file='${images.loRes.destDir}/${images.cssFile}'/>
	    <echo/>

	    <echo message='Merging low resolution dwt images'/>
	    <echo/>
	    <imagemerge destdir='${images.loRes.destDir}' 
	      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
	      <dirset dir='img/loRes' includes='*' excludes='**/examples,**/shadow_border'/>
	    </imagemerge>

	    <echo message='Copying non-mergeable low resolution dwt images'/>
	    <echo/>
	    <imagemerge destdir='${images.loRes.destDir}' copy='true'
	      cssfile='${images.cssFile}' csspath='${csspathprefix}loRes/'>
	      <dirset dir='img/loRes' includes='**/examples,**/shadow_border'/>
	    </imagemerge>
	  </target>
	
	
	<target name="htmleditorexample">
		<copy todir="${build.examples.dir}/htmlEditor" overwrite="true" >
			<fileset dir="WebRoot/examples/htmlEditor" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		
		<!--   NOTE: images now coming from the common "htmlEdit" directory -->
	</target>
	
	<target name="dataviewerexample">
		<copy todir="${build.examples.dir}/dataViewer" overwrite="true" >
			<fileset dir="WebRoot/examples/dataViewer" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		
		<!--   NOTE: images now coming from the common "examples" directory -->
	</target>

	<target name="mixingexample">
		<copy todir="${build.examples.dir}/mixing" overwrite="true" >
			<fileset dir="WebRoot/examples/mixing" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		<!--   NOTE: images now coming from the common "examples" directory -->	
	</target>
	
	<target name="treeexample">
		<copy todir="${build.examples.dir}/tree" overwrite="true" >
			<fileset dir="WebRoot/examples/tree" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
		
		<!--   NOTE: images now coming from the common "examples" directory -->
	</target>
	
	<target name="xformsexample">
		<copy todir="${build.examples.dir}/xforms_test" overwrite="true" >
			<fileset dir="WebRoot/examples/xforms_test" includes="**/*" excludes="**/img,**/img/"/>
		</copy>
	</target>
		
	<target name="examples" depends="images, htmleditorexample, treeexample, dataviewerexample, mixingexample, xformsexample"/>
	
	<!-- 
	This target is meant only to be run after a full deploy has
	been done once. It does not deal with the java code used by the
	ZimbraWebClient webapp, so if there are any java changes, another
	deploy will have to be run.
	-->
	<target name="dev-sync">
		<echo message="Deploy Dir: ${deploy.dir}/${deploy.path}"/>
		<copy verbose="true" todir="${deploy.dir}${deploy.path}">
			<fileset dir="WebRoot" includes="js/**,examples/**" excludes="examples/**/img/"/>
		</copy>
		<copy verbose="true" todir="${deploy.dir}${deploy.path}/WEB-INF">  	
			<fileset dir="${build.dir}/WebRoot/WEB-INF" includes="web.xml"/>
			<fileset dir="WebRoot/WEB-INF" includes="tlds/*"/>		
		</copy>
	</target>

	<target name="war" depends="build-init, copy-files-to-build-area, i18n, examples">
		<war warfile="${warfile}" webxml="${build.dir}/WebRoot/WEB-INF/web.xml">
			<lib dir="${jars.dir}" includes="*.jar" excludes="servlet-api.jar"/>
			<classes dir="${build.dir}/classes" includes="**/*.class" excludes="**/imagemerge/*,**/build/*"/>
			<classes dir="WebRoot/js/config" includes="msgs/*.properties"/>
			<classes dir="${build.dir}/i18n" includes="msgs/*.properties"/>
			<webinf dir="WebRoot/WEB-INF" includes="tlds/*"/>
			<fileset dir="WebRoot" includes="js/**" excludes='js/**/config/msgs/**'/>
			<fileset dir="${build.dir}/WebRoot" includes="examples/**"/>
	    </war>
	  </target>

	<target name="deploy" depends="war">
		<deploy url="${deploy.url}" username="${deploy.user}" password="${deploy.password}"
			    path="${deploy.path}" war="${deploy.war}" update="true"/>
	</target>
    
</project>

